[
    {
        "post_id": "18te9h0",
        "author": "Ryanthequietboy",
        "title": "My interviewer when he reads my solution",
        "url": "https://i.redd.it/9g4qf58uv59c1.png",
        "score": 2094,
        "num_comments": 29,
        "created_utc": 1703824153.0,
        "selftext": "",
        "permalink": "/r/csMajors/comments/18te9h0/my_interviewer_when_he_reads_my_solution/",
        "comments": [
            "\"Well, that's a you problem\"",
            "plucky abounding vase touch correct steer shame wakeful disarm exultant\n\n *This post was mass deleted and anonymized with [Redact](https://redact.dev)*",
            "Thanks man! I appreciate it!",
            "\u201cskill issue\u201d",
            "Ok let me walk you through my code then",
            "I feel you",
            "Tbh, it's perfectly valid when people shorten the variables to hell and made honest to god unreadable code formating (example being no indentation or new line for the object or something)\n\nBeen awhile since I write some codes so I forgot a lot of the terms",
            "Bruh, your \"solution\" is just the Neetcode solution to a similar/same problem.",
            "\"I missed the part where that's my problem\"",
            "The consequences of doing nothing but leetcode:",
            "What site is this?",
            "Well that's your skill issue, you don't understand it. My code works as it's supposed to.",
            "LGTM"
        ]
    },
    {
        "post_id": "17fjjks",
        "author": "Frostfire819",
        "title": "It actually happened to me.",
        "url": "https://www.reddit.com/r/csMajors/comments/17fjjks/it_actually_happened_to_me/",
        "score": 2077,
        "num_comments": 95,
        "created_utc": 1698171822.0,
        "selftext": "Ok so it actually happened to me. I hear this joke a lot amongst CS majors. But I actually didn\u2019t think it would happen to me, and ngl when it was happening I thought they were pulling my leg.\n\nIt was a random Tuesday morning, I was walking to class beside the business school. I tend to wear pretty CS-identifying outfits, like headphones, (not sarcastic) space grey/black clothes, glasses. One of my friends from the business school stopped me and asked me if I would be on board with their startup idea.\n\n\u201cSure, what will my role be?\u201d I asked\n\nI immediately knew the answer. \u201cCan you code up our app? And website and stuff?\u201d I quickly replied \u201csure. How much will I be compensated\u201d\n\n\u201cUm well the idea is you get experience \ud83e\udd21\ud83e\udd21\u201d\n\nI genuinely never thought this would happen to me. Lesson learned, never walk by the business school again. \n\nI wish I could say I was joking, but it\u2019s super common for business students and other professions a like to ask CS majors to code up their stuff for free.",
        "permalink": "/r/csMajors/comments/17fjjks/it_actually_happened_to_me/",
        "comments": [
            "It's time we turn tables. Start making apps then get business majors to volunteer their services for experience.",
            "[deleted]",
            "There are some desperate people on this sub who would have accepted that offer",
            "Mindset helps a lot. I actually like talking to business majors as they think very different than I do and are often great idea engines.\n\nThat being said yeah, you are correct to not be working for free and they should know that too - didn't we learn anything from facebook's inception?",
            "Wait until family members do it to you. I always hear them out then say ill look into and never do",
            "i'll take things that definitely, really, actually happened for 500",
            "If you get a shit ton of equity and it\u2019s a good idea that your team would have domain insight over, do it.",
            "Next time just completely steal their idea. Work with them for a bit and don\u2019t sign anything with them, and get to work on their own. As a business student I\u2019m really sick of hearing about this because it\u2019s really unfair and I think it gives these business students an unfairly big ego because they think THEY did something. Put them in their place.",
            "This is a rite of passage in our field. Another similar one is when you're sipping pumpkin spice latte while you're coding on your mb air in a  mission district coffee shop and couple random dudes come to you and pitch their idea and talk equity. That's when you know you've made it in sf.",
            "You know, people always say this. But telling you right now from experience (im a software engineer), in most software businesses, especially when starting out, the development is the easy part and the business part (marketing for lead generation, sales, research on your consumer, finding product market fit) is the hard part.  \n\n\nDon't believe me, go on r/SaaS",
            "WTF kind of \u201cbusiness\u201d school teaches their students to not pay their employees?",
            "*Me, a business major and computer science major*",
            "same, they asked me coding the full platform and giving 2-3% of equity. While all they did is just writing some white papers \ud83d\ude14",
            "At least you got a job offer you could deny.",
            "That doesn\u2019t sound bad to me. You should\u2019ve just asked for equity but chances are their business idea isn\u2019t really worth the salt and won\u2019t take off anyways.\n\nWhy dismiss a good learning experience? You\u2019re in college to learn, is this not a good opportunity for a lot of experience and networking too? I\u2019d love to do this back when I was in college.\n\nAlso don\u2019t treat yourself like you\u2019re a senior engineer with a decade of experience if you\u2019re just a CS student \u2014 will help you a lot in life to be a bit more humble.",
            "openAI can do it",
            "Business majors have to get an early start profiting off of ventures to which they provide no valuable labor.",
            "My advice is to listen to the idea. The idea could be really good and motivate you to try to be a part of their business and put in the effort. \n\nAssess how many hours it would take you to build the idea. Compare it to the amount of hours the rest of your friends would put into the idea at the same time and propose to divide the equity accordingly. Don\u2019t buy stuff like \u201cthe idea in itself is worth this and this\u201d base in on the amount of work put into the project in the initial phase.\n\nBe vary of red flags where your friends underestimate the hours needed to implement their idea and an overestimation of the value of what they bring to the table in the beginning phase. If they have no grasp of reality then run like the wind because they will never accept that the implementation of their idea might be worth 75% of the project even if that is the workload ratio.\n\nA more plausible team setup is usually 3-4 cs students and 1 business student. Then you can all have an equal 20-25% workload in the project.",
            "\u201cI tend to wear pretty CS-identifying outfits\u201d Jfc the cringe \ud83e\udd26\u200d\u2642\ufe0f",
            "Happened to me coming out of grad school. I said yes. Four years, few million lines of code, and some major frustrations later and I walked away a fairly wealthy man. \n\nDont always chase the money. Chase the opportunity.",
            "Time to start getting paid for it",
            "why does your outfit matter if your friend and not a random person asked you?",
            "Damn, thats tough. What did you say back",
            "Only appropriate answer is \"sure I can do that. I get 80% equity right?\"",
            "Haha bad old times are back. When there is less work then programmers wannabe then they can work for cv entry. I saw it a lot between 2005-2010.",
            "I'd imagine a lot of startups began this way.\n\nI would take such offers seriously but skeptically especially from people I didn't know.",
            "\ud83d\ude02\ud83d\ude02\ud83d\ude02",
            "Lmao\ud83d\ude02",
            "Turn the tables. Make them your first SaaS clients. You build it, they pay $50/mo for hosting and after launch, you charge them per user per month.",
            "What are college students gunna pay you with?",
            "Sounds like you know more about business then they do!",
            "Before you \"yes\", you should have brought up payment. I'm an Eagle rank boy scout. I know that trick of trying to make \"you\" feel guilty.",
            "Social Network pt. 2",
            "I know people who are making chatgpt make apps and stuff.",
            " They can advertise my product !!",
            "Your friend will be very successful in business",
            "These kinds of people want you to do all the work and take most of the profit. Avoid.\n\nOr, alternatively, price out the shortest engagement that they can afford so they realize what that work is actually worth",
            "Agreed to it and have them sign an NDA with $50,000 penalties for them trying to use it as their own work or trying to sell it without your permission.",
            "Bummerrrr",
            "Even if you are compensated. if your share isn't at least 50% run away. Business people are useless.",
            "So brave.",
            "Just listen to their pitch, and then later you can code it up and incorporate the business yourself (if you think it is worth it) and then hire them if they have any skills worth paying for.",
            "Software engineer with 7 years experience here - working for free should be a last ditch effort to gain experience. I wouldn't completely rule it out though - since you will gain experience. If you haven't gotten any COOPs/Internships/Apprenticeships, i.e. zero work experience, then you'll need to start somewhere. \n\nIf you're self-motivated, you can create your own projects, but not everyone is, and that's ok. You can outsource the design and product stuff to these business folk, and focus on harnessing your dev skills, and end up with something to talk about during interviews. \n\nAlthough, I would definitely dodge young business STUDENTS - they have no idea wtf they are doing either. What I'm talking about is working for a real startup for free - that's an opportunity to actually learn something",
            "They sure do.",
            "This girl I was trying to talk to again (dated in middle school) dropped that bomb on me with the idea being her bf idea. The app was never made lmao!"
        ]
    },
    {
        "post_id": "1btj6a4",
        "author": "lardymcfly69",
        "title": "You are not passionate, you are entitled.",
        "url": "https://www.reddit.com/r/csMajors/comments/1btj6a4/you_are_not_passionate_you_are_entitled/",
        "score": 2075,
        "num_comments": 285,
        "created_utc": 1712013625.0,
        "selftext": "I saw a post today complaining that there are \"too many people studying CS\" with hundreds of upvotes. Listen, being \"passionate\" doesn't mean anything. Why should **ANYONE** give a **FUCK** that you are \"passionate\" about CS?\n\n**The people who deserve high paying CS jobs are NOT people who are passionate, it's people who are GOOD at computer science.**\n\nThe real passionate people aren't working for FAANG, they're building Free, Open Source or 'Libre' software (and if you don't know what that means, how can you really say you're passionate?) So if you're so passionate, quit waiting for that $100k job and join them. If you are **actually** passionate about CS, real passion, like a starving artist, not whining about oversaturation on this sub, you already know the answer. **Live cheaply, live frugally, build good software.**\n\nPeople who say \"but I'm not like most, I'm passionate\" are self reporting by thinking you're entitled to a high paying job when you're probably just not that passionate or special.",
        "permalink": "/r/csMajors/comments/1btj6a4/you_are_not_passionate_you_are_entitled/",
        "comments": [
            "Passion does not indicate competence, but is a good predictor. If you're interested in something, you'd spend more time on it, and that often translate to better skilled.",
            "l i t e r a l l y. too many people are just expecting a 100k+ salary with nothing to back it up",
            "Most people don\u2019t realize chasing your passion instead of going where money goes is a privilege",
            "\"Passion\" is the most bullshit word ever. I know this is a CS Majors sub, but your \"passion\" does not have to be your job. I'm passionate about traveling the world and owning a farm in the middle of nowhere, but that isn't going to pay the bills.",
            "But there\u2019s too many people in CS except for me I definitely belong here but everybody else is the problem",
            "The people who are passionate tend to be the ones who are good at computer science as they put in the most effort. \n\nRegardless, people have bills to pay. Working on free software doesn\u2019t pay the bills the majority of the time and you can be passionate about software without being a die hard free software enjoyer. You don\u2019t think for-profit founders were passionate about their projects? You aren\u2019t special just because you exclusively work on open source projects, put stickers on your laptop to show your support, and refuse to apply for FAANG because you are too \u201cpassionate\u201d for the salary.",
            "I mean it's fair to complain about the market being oversaturated. It shouldn't be this difficult to find an entry level job or internship.",
            "I just read the other post, it's [this one](https://www.reddit.com/r/csMajors/comments/1btchwf/there_are_too_many_people_taking_cs_as_a_major/) right? That post doesn't say anything about passionate engineers deserving a high paying cs job. It says that too many people in CS are in this major for the wrong reasons. \n\nI have mixed feelings about the importance of passion in this major. I don't think that you have to be passionate about computer science as a discipline itself, or even the industry side of things, but thrive on solving difficult problems. That other post talks about people who are enthusiastic about computers in and of itself. But you can hate anything related to computer internals - so long as you are enthusiastic about some aspect of analytical problems related to computing, I believe that you can find success in this major.\n\nThis whole thing about passion reminds me of how education systems approach the word \"talent\". Talent in some peoples' eyes is natural affinity towards some discipline. But most talent programs recruit not for that but their enthusiasm and grit towards excellence in said discipline - which like your post is saying - is really all that matters",
            "Respectfully that poster did have a point; I graduated high school in 2018, and at that time there were two directions that almost EVERYONE was told to go in; engineering or computer science. I saw so many people who knew nothing about computers go into CS and end up failing out. \n\nSo, I think their post was poorly worded. But it is true that there is far too much societal pressure on young people to study CS right now.",
            "I feel like there\u2019s a massive strawman argument on this sub saying \u201cyou need to stop thinking you\u2019re entitled to a high paying job\u201d..No. that\u2019s not the issue..Nobody is thinking that. We just want any job in the field, which is extremely difficult to get.",
            "This is just as stupid as the gatekeeping post. \"Your passion is only real if you build open source software\" is fucking clown shit dawg. People need to eat. Open source software doesn't pay the bills unless it really blows up and people donate to you.",
            "I was in that thread and yes I was discouraging people from joining CS if they weren't passionate about it. There's nuance there.\n\nYou don't need to be passionate about CS itself. You need to at least embrace CS as something that lets you \\*do\\* something else. It's a tool. Few companies are actually involved in pure tech and require pure passion because the business use case is many steps away. Everything else is using CS to achieve some other business result where you can be passionate about that business.\n\nHow do you know you're passionate? Go write some code to solve a problem in your life. If at the end if you are done and get a sense of satisfaction of the code you wrote, that's enough. You don't need to love the process of writing code, but you shouldn't be afraid to touch it, or disgusted after you solve the problem. If you hate writing code for something you enjoy doing, you're going to hate it even more when you are solving someone else's problem. I think it's well meaning to try to get people out of a field they won't enjoy.",
            "As someone about to graduate, I can say i feel comforted by all the obviously non passionate people who literally did nothing outside of class, like they just say \u201coh I don\u2019t know python\u201d. Very clear in the group senior design projects who has built software and who has just turned in assignments for DSA class",
            "[deleted]",
            "\"Don't ask for a quality career with good benefits. Work for free instead!\"\n\nBruh",
            "Yeah and the people who suck ass and aren\u2019t passionate should be the least of anyones worries",
            "what really boggled my brain about that post was him complaining that ppl \"aren't interested in CS until they come to university\" \n\nlike ?? sorry?? that I wasn't born into an environment where my 10 year old self could just stumble upon programming accidentally?? \n\nthe superiority complex is just absolutely insane. We're living in 2024. Programming is a good skill to have regardless of if you're \"passionate\" or not like cooking or knowing how to fix your own car. Literally who is being hurt by the general population becoming more knowledgeable and aware of computer science? This field dictates every aspect of modern human life",
            "So tired of hearing about FAANG and six figures. I'll happily do the job for 60k in some lil no name shop in my town and be ecstatic to do it. What I don't want is to graduate and get a job at Starbucks serving coffee.",
            "Most of the \"passionate\" people somehow still manage to be ass at coding. Why don't they understand passion doesn't mean shit if they're not actually meant for it.",
            "Starving artists aren't starving because they're passionate, they're starving because it's extremely difficult to make money with art. That is not the case with CS.",
            "Ok",
            "Your example make me kind of smile. It's like saying \"if you're passionate about basketball, why would you try to get into NBA? just play on the streets or the nearby gym!\".\n\nLet's deliberately set the money aside for a moment.\n\n - Big tech (in the broad sense) works on some of the most complex and interesting problems in various domains - e.g. AI, cloud infrastructure, novel operating systems, database engines and hyperscale storages. Why would a person passionate about CS not want to work on them?\n - Big tech employs a lot of really smart and driven people you can learn from and grow. Why would you avoid that?\n\nNow let's talk about Linux kernel as a most famous example of open software. You realize that like 85-90% of it's code is (being) written by people working for large corporations, right? Been this way for many, many years. It's not 1995 dude, it's 2024. Sure, Linus, GKH and maybe few other legends at are the foundation, and many are are Redhat, but a lot of very fundamental work in the kernel is being done by people working in many big tech companies.",
            "You are not passionate until you are willing to do it for free.",
            "study the blade, simple as that.",
            "Bruh, some people just want a job regardless of the salary. In this economy, they will happily accept a 60k offer. I won\u2019t say they are entitled, they are passionate about not starving to death.",
            "I\u2019m very passionate about Italian food",
            "I literally just want a job bro, I\u2019m passionate about not being in poverty",
            "I would guess that the majority of people working- high pay or not- aren't passionate about their job. People who are passionate about their job are very lucky to be able to do something they love every day. But it's definitely the minority of people and there's nothing wrong with having a job just to pay the bills. I mean, at the end of the day, that IS why we work. Yeah, it sucks that the job market is so oversaturated right now, but let's stop being mad at each other when we're all just trying to do the same thing at the end of the day.",
            "People talk about passion and the only passion I have is for survival",
            "if they can read they\u2019ll be mad at you",
            "chat, what does libre mean",
            "Shoutout to all the open source and free software people who have been [maintaining their projects](https://xkcd.com/2347/) since forever.",
            "I am passionate and I build open source software lmao",
            "Why are all these posts so aggressive lmao",
            "i always laugh at the ones who are like \"I built computers as a kid!\" what does shoving a graphics card into a computer have to do with react hooks?",
            "Look , I understand what you mean. But for us who love coding since child seeing all this kids crying because they can't get the 100k job they want and being depressed about it annoyed us.\n\n Like, alot of people go into cs but hate to code and everything about it , only in the field for the promise of big money and think that they wasted tons of money and times for nothing after few month of rejection does annoyed who actually care. \n\nAlso saying that people who passionate don't do side project is dumb af. Most of the people I know who love this field would code on their free time doing side project as hobby. I do it too. If company ever lower the salary to the likes of other field of work, I'm 100% sure the passionate one will still stay while most of the rest will just cry",
            "I'm 30 years old wasted my entire high-school years - late 20s gaming, barely got my diploma. Now doing my first year in CS went to a web dev boot camp prior to getting into college. I just wanted to learn to code because of all the crazy shit going on in software. Bitcoin, NixOS, rust....I had to get in I want to contribute to everything. While in the boot camp all people talked about was the money non stop and I kept bringing up how bad ass nixos  and other technologies like terraform were. A project I did out of the gate was an ai image generator using open Ai's api, no one could believe that I just started the boot camp but what I was astounded by is that no one who was in the boot camp even looked up the cirrculum before getting in. All they talked about was which programming language was the best and how much money they were going to make once they got out of the boot camp. I think I am the only person to come out with anything on github from the boot camp class and I am going to get my CS degree because I want to learn low level and just need a bit of guidance but I honestly don't think I or anyone even needs school. Learn CS and/or how to program because the internet is bad ass and if you learn to code you will be too.",
            "[deleted]",
            "If they are so passionate why are they worried? Passion leads to being competitive and that usually leads to being great at the thing\u2026 are they getting their asses kicked by a bunch of low effort coders?\n\nLmao",
            "If u're Passionate about CS, u work on ur competency instead of whinning Is the one thing I am sure about.",
            "I just wrote a program that says hello world in a html page. Where is my 100k a year job?",
            "Usually those with passion are better. And I work a high paying job where I get to do OSS work. So I do get to be passionate about my job.\n\nAnd while I like doing OSS work, some of the most interesting and challenging projects I\u2019ve worked on were not OSS.",
            "Gatekeeping the gatekeepers. Nice.",
            "I wouldn't say that you need to have a passion for CS, rather you need to have interest and curiosity.",
            "thank you",
            "Ok unpopular opinion here it seems but am gonna say it:\n\nImma sum it up : u can be good and not passionate totally ok if u're up for it u can have a job and be fine altho its getting tough now and thats for everyone but not the point\nBUT if u think a person who's doing smthing just to get by or to pay bills is the same as someone doing it cuz THEY LOVE doing it ...u're compltely out of touch and objectively wrong ...(your argument that passionate pple should just go build open source is stupid ...many are actually doing this BESIDE their job...see the diggerence ? Building software is their job AND passion...its their life ) so yes passion does def matter and saying otherwise is lying to yourself .\nAnd this goes in every field in life. I should just remind again u dont HAVE to ..but it does actuallyy matter and make a difference in every way possible",
            "CS and Enginnering are the new trend, everyone is studying the same thing hoping that they will be rich one day. When there is a surplus it is less valuable, simple intro to economics principle.",
            "From the creators of:\nYou don't have to be smart to land a six figure tech job\nAND\nYou don't have to be good to get a high salary tech job\nIt came to us:\nYou don't have to be passionate to have a high paying tech job.\nAt this point you don't have to even know a shit in CS to have a big pay check in CS",
            "I\u2019m passionate about making enough money to buy a good car",
            "Man.  There is a correlation between people who are genuinely obsessed with CS and people who are good at CS.  I\u2019m honestly not sure what point you\u2019re trying to make here apart from complaining.\n\nEdit:  I think your point is that people who claim to be passionate about CS are not actually passionate.  So just say that then.",
            "Gonna be that guy, but cheaply and frugally are practically the same thing so there's no reason to use both in a row.",
            "If you want passion go to games, otherwise stfu, if you not in it for the money the door is open.",
            "What if I contribute to open source so I can put it on my resume to help me get into FAANG?",
            "Correction* The people who deserve high paying CS jobs are NOT people who are passionate, it\u2019s not even people GOOD at computer science, it\u2019s people who are good at Leetcode. \nOr who got lucky with the Esops from a startup.",
            "Must\u2019ve stuck a cord with you freshman",
            "Funny enough I\u2019d state im the opposite of passionate but from what I\u2019ve been told, connections matter the most and if you are truly passionate it also means you put yourself out there, and when you put yourself out there, you generally get solid connections. If your passionate but don\u2019t put yourself out there, idk if you can truly call that passionate",
            "Why are you so mad that he is passionate about what he does?",
            "I dont know that is a stupid thing to say \"If you have passion do it for free\". Everyone has to pay their bills and wanting to get paid for it is not wrong. Sounds like that argument is flawed in so many ways. Yes, I agree with passion != skill however take it from some of the best the world have ever seen like Pele \"Success is no accident. It is hard work, perseverance, learning, studying, sacrifice and most of all , love of what you are doing or learning to do\" or Aristotle \"Pleasure in the job puts perfection in the work\".  Maybe take it from the creator of Peter Pan \"Nothing is really work unless you would rather be doing something else\". One random quote that I saw and really like when trying to find the Pele quote was \"Whatever you like doing, do it! And keep doing it. Work hard! In the end, passion and hard work beat natural talent. And anyway, if you love what you do, it's not really \"work\" anyway.\" Pete Docter  Chief creative officer of Pixar. So you see rather than arguing with you about this, and rather than put it into my own word I rather listen to the people that have actually accomplish something with their lives. Wanting to enjoy the work you do is not a bad thing. Passion is big specially when there is so many people out there. Passion drives people to places in search of answers that others might not even bat an eye. Yes some people here use it as a buzzword but true passion is what drives people to learn beyond what is asked of them and yes to answer your question will do it on their free time even if they are not getting paid for it.  \n\n\nIf none of this hit home for you then listen to the grandfather of computers Alan Turing \"Sometimes it is the people no one imagines anything of who do the things that one can imagine\"",
            "Being 30 years into my career I\u2019ll take passionate any day. Better predictor of a competent employee as they\u2019ll continue learning. CS majors that aren\u2019t passionate but have the degree will suck 5 years out from graduating cause they think they learned it all and flounder later on. If you\u2019re just in it for the money, you\u2019re going to have a long and possibly mediocre career.",
            "if you're good, it doesn't matter whether you're passionate or not. Just that passion may push someone to do better. But if people with passion are blaming those who aren't passionate for ruining the market, then they probably aren't good enough anyways",
            "entitled is the wrong word, but still it's weird too see all those career peopel flocking into this previously quite nerdy and niche subject. Now we need to handle very culturally different people",
            "that is such a miserable life hahaha working a 9-5 that you hate. something you have to do when you don't have money right? guess then i am lucky enough to say i don't have to work in the industry. and i am not even working yet. but even as an undergrad i look at you and think mmm that is definitely not who i want to be in the future working like that till i die? nahh i hope you think your life is meaningful. what will i do? as someone who's actually curious and passionate about the field, research and startup that solves real real problem is how someone excels. and. guess what we're on a shift of gears in this industry and you are most probably going to be set out of your misery in a couple of years unemployed anyways and that's fine. enjoy it as you can. genuine advice, do what you actually like, don't waste your life running after that mere 100 200k a year salary...",
            "There\u2019s also nothing wrong with expecting a decent paying job in your field after you\u2019ve already put 4+ years of work in and earned a degree.\n\nPeople that aren\u2019t getting jobs are rightfully frustrated, because many of them have been sold the idea that you just need to work hard in college, get your degree, and you\u2019ll make a decent living. Sadly, that idea is becoming less and less real as the days go on.",
            "Unfortunately being broke and taking on more work while going to a University can be really challenging for people that are very broke. \n\nFor people that have a safety net, I think the earlier you get in the better, but I think for those people they probably had a good start to begin with putting then ahead already. For those that don't take advantage of that, that's a different story.",
            "p.s. a lot of the people contributing to open source repositories are being paid by some company because they need X feature",
            "fire me up",
            "Im passionate but I still wanna make big bucks, life is all about the moolah big guy!",
            "Some of the responses here are \"over-engineered\" and show that many of you miss the damn point.\n\n\"So smart ya dumb\" \ud83d\ude12",
            "this comment section is goat>>>",
            "I already have a golden goose job according to the standards around this sub. Fully remote with more than 100k a year only 2 years into my career. A big advantage I have over you OP is that I don\u2019t talk to other people about CS like this. I doubt this level of bitter resentment doesn\u2019t seep through when you\u2019re talking to other people. Another part of it is the \u201ccompetence\u201d myth. Plenty of people are terrible at their jobs and they make more money than your entire bloodline. We do not live in a meritocracy. Take the time to figure out whether or not this is a productive attitude to have.",
            "Yeah there's a lot of entitlement but you also gotta empathize with those struggling, man.",
            "You can be passionate and still be shit at CS lol",
            "> The real passionate people aren't working for FAANG, they're building Free, Open Source or 'Libre' software\n\n\nThese are often very literally the same people.",
            "There appears to be a large wave of people who are becoming programmers the way people used to become baristas, Uber drivers, accountants, garbage collectors, etc. Jobs where there's not a lot of passion but a good promise of steady work and good workplace conditions.\n\nI think this is the right thing! The future is one where robots do most of the things we don't want. I think learning to program will be a need, not a luxury in the future. \n\nThat said, I'm sure a lot of people feel disappointed when someone else who is only in it for the paycheck gets their dream job. And that's where the venting posts come from. It definitely comes across as entitled gatekeeping, and should be called out accordingly. I know lots and lots of great programmers who aren't \"passionate\", just very reliable, intelligent, and competent. They write great code and then go pursue their passions outside of work, as it should be.\n\nBut maybe passionate devs shouldn't be discouraged from being passionate. They should be asked \"if you're so passionate about programming, why do the people you claim aren't as passionate stand a chance? Surely you can show them that hard work, dedication, and love for the field will separate the great devs from the mediocre devs?\" \n\n(And if they can't accomplish that, maybe they should rethink how much passion matters when gatekeeping.)",
            "Passion is good for resilience. Resilience is needed in this market, where there are simply FAR more applicants/graduates, than there are roles. It's a numbers game.\n\nI definitely don't agree that passion is a must in order to be worthy developer. But passion is very helpful in order to withstand what looks to be a long period where applicants far outstrip the number of available opportunities. \n\nIt's easier to withstand periods where there are fewer opportunities, when you're genuinely passionate about the subject matter.",
            "If you are good at computer science you probably enjoy it. If you hate coding than most likely you will not be willing to put in the work to learn and you will burn out. \n\nI think that is the point the other poster was trying to make. Passion is a strong a subjective word .",
            "Passion is what keeps you going in the dark times.",
            "Saying you love coding is like saying you love ice cream.\n\nGuess what, most people do. You're not special.",
            "Saying you love coding is like saying you love ice cream.\n\nGuess what? A lot of people do.\n\n Most people enjoy coding when they discover it. People enjoy solving puzzles. Who would have thought? You're not special.\n\nI may even add, the reason we had few people discover the field in the past, is because of gatekeeping.\n\nThe more people we can get into this field the better. We've made our money, let's open the gates now.\n\nTo quote the Incredibles, \"Once everyone is special, no one will be.\"",
            "I\u2019d take a 50k salary",
            "Thanks for the sage advice, u/tardymcfly69 you're clearly a respected professional in the field.",
            "Not necessarily, I work for FAANG because I can work 10hr a week and be able to pay all my bills.\n\nSpend the rest 30hr doing open source stuff, sounds like a win to me.\n\nIf I quit, then I have to work 40hr job, leaves no time for my \u201cpassion\u201d.\n\n(Ofc this is not real, but just saying, generalization is never good).",
            "Who gives a f*** if you're working at FAANG? How stupid can you be? That persons post in general is correct. Most people who are good at CS are those who are passionate about it. Anyone who did it just because they thought they'd make a lot of money or because it's cool..etc usually struggle (regardless of whether they worked at FAANG or not).",
            "It\u2019s evident how the interview goes south when you use the word \u201cpassionate\u201d in your answers.",
            "genuinely, wtf does this mean.",
            "Anyone who actually cares knows what Open Source is. Stop pretending you are special OP.\n\nYes we who were doing this before it was popular should be the ones who reap rewards. Same to all the tireless devs who write Open Source software. Both big tech and the Internet at large would collapse without them. They deserve appropriate compensation. The existence of starving artists isn't a noble thing, it's our failure as a society. Same with starving software devs that actually make shit work.\n\nIt's not about being paid a ton either. I would take medium or low pay if it meant working on something I care about. But no people like you ruined it for us.\n\nFucking shame on you OP.",
            "Facts",
            "But I tried really hard. I even used my emotions to try harder. And it was inspirational! \n\nNow, you're telling me I have to know what I'm doing?\n\nThat wasn't in the brochure.",
            "Wow, your reading comprehension skills need some work. Maybe be good at communicating too, so you don't have to agree with the other post so incredibly aggressively.",
            "People need to earn money to survive and unfortunately status, ego and compensation are part of that conversation. It's completely valid for people to be angry or upset that worse programmers are much more well compensated than they are, if at all. It's completely valid for people to be angry or upset that worse programmers are in better spots than them though they enjoyed their coursework, enjoy programming, and study CS as a genuine passion.\n\nNot everyone can live like a monk creating free software like Terry Davis. People need to eat, to survive, to have a career. These are essentials on a hierarchy of needs, in fact, they are much more fundamental than simple self fulfilment that comes from passion projects. \n\nNot everyone has the privelege to work for free, and not everyone should be expected to, because that expectation only serves to lower EVERYONE'S quality of life, and to be frank, the people making free quality software would tell you that they'd prefer to be paid. That's why most free softwares have paid options or donations.",
            "This is one of the reasons why i don't say i am passionate about cs instead i prefer saying that i am interested in cs because of the things i may be able to do after learning more about computers + i like gadgets such as smartphones,laptops etc so i think i would not have a problem if i am working in any company which makes the products i mentioned above.But hopefully i am about to go to university this year so i still have 4 years till i step into the job market.",
            "As an entrepreneur, I do hive a FUCK about passion! Start-ups are FUCKING HARD! So if you cannot stand the ups and downs during the growth stage, get the FUCK out of my company! Only passionate peopke need to apply!!",
            "Listen dude, I love computers and I love telling them what to do. Please don\u2019t try to tell me that I\u2019m not passionate for CS just because I\u2019m trying to make a living doing what I love.",
            "Also, hot take but being passionate at a JOB is hard. When you're working for corporate companies you are working on their vision, not yours. The software will have decision making involved that isn't yours. It will, also probably not be a \"cool\" product. \n\nI like coding, I like working on my pet projects where I am making the decision but I work for a fashion design firm, am I passionate about building sales software? Not really. But I have the skill set to do it.",
            "If they were genuinely passionate, they would be putting in like 5x the effort of your regular comp sci kid, doing extra projects and research or whatever. It would be such a massive advantage that only makes them further and further ahead of their peers each passing year. They would have easily landed an internship in college if they were actually passionate, and gotten a job from that. The complainers are not actually passionate about anything but an easy paycheck. Maybe they like the idea of programming (or of easy money more likely) but they are not doing shit about it in their spare time. Passionate workers are always like 3x as productive as people who just treat it as a job, it is such a world of difference, it would be impossible to struggle finding a new job.",
            "We spend a lot of our time working, I\u2019d think you wanna do something you enjoy. I feel like you\u2019d be pretty miserable otherwise and your mental health would take a hit.",
            "I came here to drink milk, and kick ass, and I\u2019ve already finished my milk\u2026",
            "I've been working in tech for a decade in both startups and FAANGs (where I am now), and in both finance and tech. I've been interviewing candidates for our company for a while and **here's a fallacy I see in your argument: you assume that** ***being good*** **is the bar for high paying CS jobs.**\n\nWrong. The bar is HIGH. It is getting HIGHER. Everyone can do what you do. Everyone can do all the LC hards like they memorized them (they have). Everyone has a project that's cooler than yours.\n\nMany, MANY people are \"good\" at computer science these days.\n\nThe people who we reward with a position, however, are those who we want to work with. Those who actually care. Those who genuinely want to make a difference -- I.e. those with **passion**\n\nPassion won't determine success, but those who will truly be successful and get jobs at the top will have some of it. Why? We want to work with THOSE people, and THEY want to work for us -- they are **passionate**.",
            "I wrote the \"too many people studying CS\" post you mentioned and basically everybody who commented on my use of the word passion misunderstood what I was saying and had no interest in trying to better understand.\n\nFor the most part people thought I meant something like - you should be passionate about your work not just be in it for the money. But that is not what I meant.\n\nWhat I meant is most of you suck at software engineering. You had no interest in understanding computers outside of making money from it as a career and it shows in the work you do.\n\nI used the word passion but I could easily have exchanged it with curiosity. In my experience it acts a proxy for competence.",
            "Fr bro If I am driven by money and still make it to the same place as a \"passionate\", That just mean their passion has the same worth as my LACKLUSTER GREED",
            "What a bizarre rant.  Passion is what it takes to devote the countless hours needed to master the craft.  I have no idea what OP is going on about with regard to passionate people don\u2019t deserve high paying jobs.  No one \u201cdeserves\u201d a high paying job.  That\u2019s a truly toxic way to frame it.  Be great and name your price.  Passion really helps attain greatness.",
            "i think it\u2019s comical that you said 100k job, no one is demanding to make 100k, we demand a job to support ourselves that relates to our major as we were promised upon picking this bs years ago\u2026 that\u2019s it",
            ">Why should\u00a0**ANYONE**\u00a0give a\u00a0**FUCK**\u00a0that you are \"passionate\" about CS?\n\nBecause people who aren't passionate about CS are usually dogshit at what they're doing and annoying to work with. Not saying passionate people can't be shit and that there's nobody who isn't passionate who's actually good, generally it's true tho",
            "Someone watched one too many Andrew Tate Alpha videos",
            "Agreed lol I\u2019m passionate about games but I don\u2019t expect to make jack shit playing video games cuz I have no talent nor skill in it \ud83d\ude02",
            "I\u2019m passionate about switching careers. I already make 100k plus as a contractor, but I\u2019d gladly take less to stop having to kill myself year after year in the elements. I will say though, I switched my major from CS to cybersecurity. The starting pay is actually a little better in cyber, and it actually has more growth potential going forward than CS with a bachelors alone. Something to consider..",
            "Why is this sub so toxic man . .",
            "\u2018The real passionate people are building open source\u2019 How the FUCK do you know what I\u2019m doing? Because I\u2019m passionate about the science of computation I have to contribute to the Linux kernel?? How about you go fuck yourself",
            "The f\\*\\*k is wrong with Gen z's and \"passion\"",
            "Sounds like you are jealous of passionate engineers actually DESERVING their 6 figures. You know deep down you don\u2019t deserve that money.",
            "I'm passionate about fucking my wife and that's about it."
        ]
    },
    {
        "post_id": "1cimctl",
        "author": "miraclepath",
        "title": "Searching for summer internship be like",
        "url": "https://i.redd.it/6hyr7t8dz1yc1.png",
        "score": 2031,
        "num_comments": 58,
        "created_utc": 1714673066.0,
        "selftext": "",
        "permalink": "/r/csMajors/comments/1cimctl/searching_for_summer_internship_be_like/",
        "comments": [
            "Nepotism success rates still going strong",
            "I am 41.\n\nAll my jobs came from nepotism or by networking.\n\n25 years of work.",
            "Proper representation of current scenario with including nepotism.",
            "As someone who got a dev job from their cousin, this hurts lol",
            "For a second, I thought this was saying you were hired by a crony at [SankeyMATIC.com](http://SankeyMATIC.com) and this was going to be the most meta thing I've ever seen.",
            "Why censor amazon",
            "Devil\u2019s advocate but if you got 15 first interviews, that\u2019s actually a lot. If you\u2019re not getting past first interviews that\u2019s on you, comp sci is def competitive. \n\nWere these 250 applications to different companies, all in your domain/specialty? Or did you apply to multiple postings in different roles at the same companies? Like if you apply to front end, back end, full stack, mobile, ml, ai? Or were these all applications to different companies, for internships where you feel you\u2019d be a strong candidate and successful in the role/team?",
            "Landed a second interview from nepotism. It's tomorrow. Note: second interview for same job.\n\nLesson learned: there will come a time where you have to choose between being honest & surviving. Pick surviving.",
            "Score one for nepotism.",
            "Nepotism = connections = networking\n\nNothing wrong with it!  Congrats!",
            "You can get waitlisted at internships??",
            "Feel this. \nI went 0 for 51 on summer internships as a sophomore . 3 ghosts after first round interviews.\nHang in there op. All it takes is one yes",
            "One of the realest I\u2019ve seen",
            "Nepotism is just a very advanced form of networking.",
            "Funny post, but I hate the idea that nepotism is somehow frowned upon. You\u2019re obviously trying hard to get a good position for the summer but not getting a ton of opportunities to show your potential. Don\u2019t feel bad about taking an opportunity that will let you spread your wings and try to develop some good skills.",
            "following",
            "The fact these infographics exist make me wonder if the job they are attempting to fill actually exists or is someone in HR just justifying their position",
            "If you aren\u2019t making friends in college, you are basically throwing money down the drain",
            "Just gotta turn networking into nepotism",
            "I forgot what the word nepotism means so I thought you developed a mental illness."
        ]
    },
    {
        "post_id": "1c9qbol",
        "author": "SmartSam59",
        "title": "What do you think of this?",
        "url": "https://i.redd.it/gx6532o1wvvc1.jpeg",
        "score": 2008,
        "num_comments": 235,
        "created_utc": 1713727612.0,
        "selftext": "",
        "permalink": "/r/csMajors/comments/1c9qbol/what_do_you_think_of_this/",
        "comments": [
            "Not required but it does help. \n\nThe best engineers are usually well versed in the fundamentals.",
            "I'm tired boss.",
            "Honestly that A LOT of stuff you need to know nowadays\u2026 i know most of it, but still can forget details and must refresh my memory. But mahn\u2026 it\u2019s tiring.",
            "In general, yes. But who learns jQuery in 2024?",
            "[deleted]",
            "Remembering that this sub is mostly undergraduates who are scared about their future, I\u2019ll point out a few things:\n\nLinked in posts are as toxic as Reddit. Which is pretty tocix\n\nWhile a toxic post, this guy is 100% right but since it\u2019s LinkedIn, it\u2019s toxic and you should parse it closely. \n\n\nI don\u2019t think that ever engineer needs to know all of that stuff.  But it\u2019s a good idea to know the lhs of each of those before diving into the rhs if you want to have an easier time understanding the problems that each creates and solves.",
            "Learn machine before machine learning",
            "learn c/c++ before python",
            "Learn quantum computing before C. Learn spaces before tabs. Learn to shower before class",
            "More wanna be influencer porn.",
            "Yep pretty much use half of this on the job\u2026 seems solid (you don\u2019t need super in depth knowledge of all, but you do need to at least understand and do most on a superficial level)",
            "Sound advice overall. In short, walk before you run.",
            "I think if you\u2019re not learning the fundamentals, then you\u2019re not really an \u201cengineer\u201d, so for that matter, I agree with his statement, but I also don\u2019t believe that just because you code, that makes you a \u201csoftware engineer\u201d and for the average coder, learning the fundamentals won\u2019t make a difference. Some people just want to build small tools and ship as quick as possible.",
            "Learn C before python",
            "Learn common sense before dumping all the smart words you've ever heard into a single post and claim it to be basics.",
            "You need to Leetcode monkey questions before all this otherwise, \"you are not ready for this job market\" .",
            "Can you guys read? He's not asking you to learn everything on the list duh. He's just saying when you want to learn a certain topic, learn the fundamental base beforehand. \n\nI've seen a lot of people just jump straight into react without js because \"that's where the money is\" and then suffer.\n\nYou guys are CS Majors? Should've taken an English Minor as well",
            "When the roots of the tree are strong, not even the mightiest of storms can knock it over. You **have** to have a strong foundation and solid fundamental understanding to survive in this field.",
            "I agree to a certain extent, some of these can be hand waved however. Meaning you can discover both at the same time. I learned REST APIs and GraphQL together. Also algorithms/data structures can be understood while doing Leetcode.",
            "The list is not even a logical order.",
            "I agree with every point except for MVC -> MVVM/SPA, I just don\u2019t see the logical order here?",
            "This guy can do with learning how to list these \u201crequirements\u201d in sorted order. \n\nReact deps JS - 0\n\nJS deps HTML&CSS - 7\n\nBro",
            "Html/css befores js? Wouldnt he mean learn html/css before a js web framework?",
            "What beginner thinks,\u201d oh I don\u2019t know JavaScript, well time to learn react\u201d",
            "I love how slavery has advanced thru the years.",
            "Learn how to write functional specifications\n\nLearn how to write software requirement documents\n\nLearn how to write software design documents\n\nLearn how to write software test case documents\n\nLearn how to write release notes\n\nLearn how to keep your software Program Manager (me) informed",
            "You can learn a lot of these at the same time on projects.",
            "I disagree completely. Learn whatever you want. No need to be so formal about it. I see in this thread \"you're not a real engineer if you don't know...\" Which is total crap. We make computer systems do things. Call it whatever you want.",
            "Learn a language with pointers (C) before learning a language with implicit pass by reference (Java).",
            "Makes me feel good because I know the things on the left and not the things on the right",
            "Learn algorithms WITH leetcode",
            "The list is \u201clearn X language/protocol before y framework/API\u201d. Hard to argue with that.",
            "since LinkedIn integrated AI into post writing, it became even more banal and idiotic, even though it was hard to believe it could be wors\n\n\ne\u00a0btw this is absolutely, clearly written by a glorified AI autocomplete. if you wanna learn a skill, learn to recognize such writing.",
            "This is a bold assumption that all of us are web or mobile devs",
            "I think there\u2019s some truth to it. More conceptually than deeply. It\u2019s good to know why your tool is working the way it is. But becoming a js master pro ably won\u2019t make you a react master. Also where does it end? Cpp, assembly, binary, that ain\u2019t helping you at your job that low level if your making guis.",
            "I'd tell him to stick his \"advice\" up his arse",
            "I guess the list goes on forever, for next couple of years!!! \n\nThis much requirement are needed to land a fresher job !",
            "I work at big tech and most of the new grads I\u2019ve interviewed fail because they lack fundamentals (ex. weak understanding of DS&A, having trouble articulating their thoughts), not because they lack knowledge about some buzzword in job descriptions. Most new grad interviews don\u2019t touch on 90% of the stuff on this list. If your goal is big tech, having a solid understanding of core concepts taught in undergrad (DS&A, databases, operating systems, multithreading) and practicing leetcode/mock interviews is a much more efficient use of time IMHO.",
            "Most ppl on this thread pretty much miss the point of this post. This post has nothing to do with what skills need for a job. All it's doing is telling you that you need to learn to walk before you run.",
            "I think you're reading this wrong. It's simply saying IF you're learning a skill, learn its dependency first. It's not saying learn 10 things and 10 things before those things. It's saying learn how to manually test before learning how to automate testing. Pretty straight forward and obvious statement. The post is just highlighting that if you're trying to understand CI/CD but don't have a firm grasp on Git first, you're going to have a bad time.",
            "I wholeheartedly agree with this. Everywhere you\u2019re going to work uses some sort of framework on top of a base technology. \n\nFor example, I\u2019m very experienced in the fundamentals of vanilla JavaScript and jQuery, so when I had to work with a framework like Angular it was easy to use that layer of abstraction *when it worked*. When angular didn\u2019t work I had the fundamentals to lean on.",
            "sounds boring as hell",
            "Nearly all advice posts from LinkedIn can be ignored entirely.",
            "Learn Data Structures before Algorithms? Did he look this list up in a blog somewhere?",
            "I hate LinkedIn.\n\n>Here's a tip on how to be the Best Unicorn Engineer and beat the Competition:\n\n>- Know everything",
            "Learn Data Structures before Algorithms??? Who tf directly jumps to djikstra\u2019s before learning what an array is??",
            "Why are you asking us to validate LinkedIn drivel?\n\nFirst time on LinkedIn?\n\nDo you have some Java checklist for us to verify for you too?",
            "Not wrong.",
            "Pretty good advice for the most part",
            "I learned web programming with react and reversed learned JavaScript and HTML/CSS just fine. The real answer is just build what sounds interesting and you\u2019ll learn the adjacent technologies along the way. \n\nOtherwise I should be learning punchcards and assembly before I was ever allowed to write hello world in Python.",
            "All that and you're still not qualified for the job.",
            "Yes, but you don't need 100% understanding before moving on to the more detailed things. Learn what you need to learn, and then explore the things around what you needed to learn a bit more.",
            "If you think what's on the left is difficult to learn, never switch to any engineering majors. These all should be trivial to anyone who wants to call themselves a professional and actually understand what's going on. Seriously who in their right mind would hire someone who has no idea about git or linux before touching docker and cicd",
            "Even if you do know the fundamentals, you\u2019ll need to periodically refresh your knowledge because no project utilizes a language/library/framework to its full potential.\n\nAlso no company has the patience to allow people to take their sweet time to learn/refresh their skills. They usually expect you to hit the ground running. So it\u2019s only natural that the industry will be filled with people who don\u2019t know everything.",
            "That's...like saying you should learn algebra before calculus.",
            "I bet he doesn\u2019t learn anything, he just posts about it.",
            "So what should I learn first? (Serious)",
            "Solid list but obviously you dont need everything i.e jQuery, GraphQL or TDD",
            "Can I add in a heart attack or stroke",
            "Facts, minus the JQuery, don\u2019t even bother, just let that die. Lol",
            "How does anybody remember this shit",
            "I concur",
            "Only one I disagree with is HTML/CSS before JS. I'm a backend node.js dev; God help you if you let me touch the CSS.",
            "A prerequesite is not a fundamental!! \nThe guy who wrote that, list bunch of prerequesite for  some tipics. Data Structures and Algorithms are fundamentals, but HTML/CSS can not be classified as fundamentals!",
            "Naah I use autopilot and ChatGPT, then Copy and paste",
            "Does anyone think they shouldn't learn HTML, CSS, and vanilla Javascript first?",
            "Some of these are more true than others.  Like, I'm doing CICD work, I'm getting api requests back in json and using JS to parse them.  Jquery helps me get the json elements I want efficiently.  It's not exclusively a DOM transversal tool.\n\nShould I learn literally all the algorithms before Leet code?  People do shoot themselves in the foot bashing their head against Leet code problems without any algorithmic backing, but Leet Code can also just as easily be used as a tool to practice implimenting algorithms you just learned and solidify your learning.\n\nJavascript is frequently useful in non-webpage applications.  It's not something you have to learn in context of HTML/CSS interaction.\n\nManual testing and TDD are just entirely different things.  You don't need to learn \"Manual testing\" before you learn to unittest.  What he means is learn how to debug software with print statements etc, but that's not what you pay a \"Manual tester\" to do.\n\nIt's beneficial to know TCP/IP basics before learning any higher level web communication protocols, http and api based as well.  But I would consider API based web protocols more of a precursor to web sockets than TCPIP.  Although I could imagine someone building a web app that requires websockets as a fundamental basis, like a chat app or something, and they'd just gain nothing from wasting time learning API based protocols first.\n\nSimilar situation for MVC vs SPA etc.  Learn MVC first if you're learning for learning sake, but if you just want to build something, and the guy running the tutorial shows you how to build it in SPA, there's nothing really wrong with just continuing to learn in that context.\n\nSo overall, there's a thread of truth to this, it doesn't usually hurt to learn a series of technologies that progressively developed through history in the order they reached widespread adoption in history, but it's not always required, and especially in a professional context, there's nothing wrong with learning what you need to know to get the ticket out the door without wildly blowing out the estimate.  If you don't know a lot about TCP/IP, but you need to send some websocket messages around, then just learn how to do what you need to do and maybe come back around to flesh things out later.",
            "Well, he is not wrong.",
            "I think that why he/she is on LinkedIn, a job needs problem solving skills, you learn whatever needed at the time, the fundamentals are just things invented at the time of the problem, they are not planned to be there, they are just there because people like to use them, only need to learn js if you are stuck at React and need to get a deeper understanding, fuck the gatekeepers",
            "I don't agree. You learn stuff deepest and best when you put it to use. Shallow dive into advanced before using it to explain the basics can be hugely beneficial to your ability to retain both\n\nDifferent people, different learning styles.  There are those who will benefit the most from a bottom up approach, but it will not be all",
            "lol ignore this guy. Learn the latest stuff or maybe wait until half of it is obsolete again.",
            "I would say that some are very valid.\n\nLike algorithms before Leetcode.\n\nOthers may be a bit \"out of the line\" but still make sense (like Linux before Docker).\n\nI would just say that this list is not \"you should know all of it\".\n\nFor example if you are backend - you will probably not ever need HTML and CSS.\n\nIf your company has dedicated DevOps - you are likely to mostly never touch Docker.\n\nIf you work with frontend - you are highly unlikely to ever touch DBs so ORM and SQL can wait until you want to learn them.",
            "As a working professional lurking here, yes, absolutely. Please, for the love of God, *understand* the technologies that you're using. It's all fun and games as long as everything works as intended, but when things behave differently from how you assume they should, you are *screwed* if you don't try to really understand them. It is an incredibly important skill.",
            "Jquery is only relevant in legacy. Any lead designer that chooses jquery in a new application has no clue.",
            "Cool, more buzzwords for my list of stuff I should maybe learn about if I care to. You don\u2019t need all of this to be a hirable engineer, but it always helps to learn skills in new areas. Just don\u2019t burn yourself out finding your niche.",
            "I'll stick with systems programming.",
            "Influencer BS.",
            "Learn Assembly for your first language",
            "Total bs. \n\nYou learn as you go and adapt to what you need to accomplish. \n\nThis might be good for making things easier on yourself but god does it look ineffective.",
            "100% yes, fundamentals before fancy abstraction layers",
            "The tl;dr version - just keep studying.",
            "Not saying it's bad advice, because it isn't, but I wouldn't take any anything on LinkedIn too seriously. Absolute worst social media I have ever used.\n\nBut yes, you should lean basics before diving into frameworks",
            "I like the overall message of this of learning fundamentals but a lot of things should be learnt together because learning is most effective with context.\n\nFor example data structures and algorithms are supposed to be learnt together - they give context to each other. One without the other is nonsense memorising.\n\nSo I think instead of the message being \"learn x before touching y\", it should be \"trying to learn y but not really understanding it? Try learning more about x to put it in the necessary context\"",
            "Learn all this only to have some CEO tell you that you will be replaced in the next few years and you'd better get busy farming",
            "i mean, but he's kinda right tho",
            "Learn to write in machine code before you learn assembly.",
            "I mean he\u2019s mostly right, but I still don\u2019t like him",
            "Just learn all the things.",
            "Kinda dog water, I don't need to really understand JavaScript to use React well.\n\nIn fact, I make it a point to not look too into JS because the language just pisses me off.\n\nThe react data flow just clicks for me and state-management is a breeze. In JS, you'd have to design the pattern to maintain the state yourself, maintain it sync'ed, and also remember id's/classes for element you specifically want.\n\nIt's such a nightmare to keep track of",
            "In general you need to understand the abstraction you directly build on top of.\n\nYou are using C? You should understand CPU Caches and syscalls and more for stable, correct, performant Software and being able to debug \n\nYou are using React? You should understand Javascript and it's edge and performance  behaviors.\n\nThe point where you run into trouble are leaky abstraction or weakly defined areas. They easily build on many different layers and components and you quickly feel overwhelmed trying to understand each.",
            "Form a directed a cyclic graph",
            "Learn punch cards before IDEs",
            "In a perfect world, yes it makes some sense. But usually the career path dictates what and when we need to learn.\n\nAlso, don't forget to learn assembler before C.",
            "Just learn whatever you need for your job during your job",
            "You would use the later technologies to learn the former wtf lol",
            "learn the rook before the bishop\n\nlearn the pawn before the queen\n\nspoken like someone who can't play chess",
            "Who needs to know jquery now? \ud83d\ude06",
            "- Also learn C before Python\n- Assembly before C\n- Binary before assembly\n\n\ud83d\udc4d",
            "C++ before JS\nC before C++\nOS theory fundamentals before Linux\nAssembly before C\nLogic Gates before Assembly\nTransistor before Logic Gates\nPhysics before Transistors\n\nMathematics before anything really\n\nProgramming basics before Assmebly or C\nTuring Machines before programming\nLambda Calculus before functional programming\n\nElectrical Signals before TCP/IP\nAgain Physics before Signals\n\nIdk\n\nSome of this comment for real, other points are for trolling points",
            "that is like the usual order of learning why is this news?",
            "Reasonable",
            "I\u2019m not the best with DSA but I believe some simple algorithms can help you understand some data structures",
            "I would say most of this is accurate unless you like the added struggle.",
            "A mechanical engineer, so I can't even comprehend trying to learn this stuff",
            "dam decide bake childlike jar like rich important nine lunchroom\n\n *This post was mass deleted and anonymized with [Redact](https://redact.dev)*",
            "Pure unfiltered bs",
            "I learned React before JavaScript and it was painful. Makes JavaScript pretty easy tho!",
            "You have to be able to really understand shit if you want to make an impact or make a lot of money",
            "don\u2019t learn ORMs, just learn sql. ORMs are the worst abstraction ever created. I\u2019ll die on this hill.",
            "More demoralization!",
            "Or just use roadmap.sh",
            "If you see this list of fundamentals and go 'oh man im tired, thats a lot' youre not gonna make it lol.",
            "You probably only need one third of that list.",
            "Beautiful text shaping",
            "Might as well start with the basics. So learn how electrons work. Then learn how transistors work. Then learn how hardware circuits work. Then learn Bool algebra. Then learn CPUs. Then learn assembly. Then learn LLVM. Then learn compiler theory. Then learn C...\n\nI think you get my point. NO. Even on a pedagogical level it's far more efficient to alternate between the high level and the foundation behind it than to learn the entire thing in a straight block.",
            "people freaking out but think of this knowledge as like a cutlery drawer and you pull out something when you need it. You do not need to keep all the cutlery in your pockets at all times get real.",
            "Don\u2019t learn anything, AI is gonna do it!",
            "This is actually a privileged and out of touch take.",
            "Learn Data Structres before Algorithms??",
            "A.I. will be capable of anything you are with those coding skills and probably 100x better, cleaner, bug free programs and scripts for infinity cheaper than you.\n\nI would learn automation and skills for repairing and installing robotics, IoT hardware and machines as industries evolve into smart warehouses, robotic-operated production facilities and the IoT comes fully to life. You will be sitting in a high-demand position for your knowledge of robotics, automation & hardware installation & trouble shooting basically becomes a new trade."
        ]
    },
    {
        "post_id": "ootjae",
        "author": "flutebythefoot",
        "title": "Just heard back from Google, Amazon, Jane street, and palantir! I can't believe it!",
        "url": "https://www.reddit.com/r/csMajors/comments/ootjae/just_heard_back_from_google_amazon_jane_street/",
        "score": 2014,
        "num_comments": 77,
        "created_utc": 1626885187.0,
        "selftext": "They said my application had been received. Very nice.",
        "permalink": "/r/csMajors/comments/ootjae/just_heard_back_from_google_amazon_jane_street/",
        "comments": [
            "I mean your basically hired at this point.",
            "Oh yeah? Tesla liked me so much they didn\u2019t even email me to say they received my application. Instead they neuralinked it to me, because they thought I was so advanced that I must already have the technology",
            "Make sure you send a follow up email thanking them for receiving your application. It's only proper etiquette",
            "I can't believe it's not butter!",
            "* insert those are rookie numbers meme *\nGonna leave Microsoft hanging? DAMN!",
            "[deleted]",
            "strong hire",
            "Ya had me in the first half..",
            "You should apply to renaissance trading",
            "Google\u2019s application is out now?",
            "Wohouw!!\ud83e\udd73",
            "Well I got instant interview at McDonalds and Burger King for customer interface job!",
            "I had a friend receive a rejection email in less time than it took him to fill out the application. Some engineer went way too far with the ML/AI feature in that applicant system.",
            "I got heard back from amazon and apple, practicing for the interview rn",
            "Brother, Flex on LinkedIn!  \nThank your family, recruiters, Manager, CEO, Professors, janitor. You earned it.",
            "You half way in now.",
            "hahaha",
            "Wait did google open yet? I didn't see anything for summer 2022 or new grad 2022",
            "Palantir $PLTR?? I like the stonk a lot",
            "YO SAMEee",
            "Absolute chad",
            "Congratulations!! I\u2019m so happy for you! Haha",
            "W",
            "high 5!",
            "Please share your cv or resume",
            "Is google SWE for summer '22 out?",
            "Next step: Ask the HR manager out on a date and tell them that you see yourself banging them in 5 years",
            "Congratulations. You have finished step 1.",
            "5 minutes later:\n\n```${candidate_name }```,\n\nWhile we appreciate your background & talent, we have decided not to move forward with your application at this time.\n\nWe will keep your resume on file in case another position opens. In the meantime, do not think about applying again \u2014 we will auto-reject you again",
            "."
        ]
    },
    {
        "post_id": "1ag6mai",
        "author": "Alive-Jackfruit-4581",
        "title": "It\u2019s over guys",
        "url": "https://i.redd.it/lgc8aohmtxfc1.jpeg",
        "score": 2005,
        "num_comments": 141,
        "created_utc": 1706777442.0,
        "selftext": "",
        "permalink": "/r/csMajors/comments/1ag6mai/its_over_guys/",
        "comments": [
            "This could actually be beneficial for when you get out cause of that security clearance",
            "most realistic post on sub so far",
            "\ud83e\udee1",
            "https://preview.redd.it/hvynmrchyyfc1.jpeg?width=1170&format=pjpg&auto=webp&s=7158034cdde865ab56ca85a92b868f239643ee9c",
            "Serve the country lil brotha",
            "https://preview.redd.it/u8scrnngo3gc1.jpeg?width=1080&format=pjpg&auto=webp&s=c285e7dde54e8cfdded2b435e15f91a434a2a00f",
            "This is the best one so far.",
            "Look at getting your masters and doing ROTC or applying for OTS (both options to become an officer). Do not enlist. OTS is very competitive though so ROTC as you get masters in CS or a similar field may be the best idea",
            "This will continue so long as CS is viewed as the easy path to easy money. Those days are gone, and they aren\u2019t coming back.",
            "If you do join with a cs degree, and you're not a fuck up, you will go very far.",
            "Fr I'm about to join the reserves \ud83e\udd72",
            "Yeah cool thing about this is it'll open up jobs where your competition will only be other American citizens. Not a lot of people have a CS degree and military experience.\n\nThen of course the benefits.",
            "stupid question, where do you go to make this kind of graphic?",
            "The harsh reality of CS guys \ud83d\ude2d But we have to do this guys \ud83d\udc4d\ud83d\udc4d\ud83d\udc4d",
            "Is cs really this oversaturated?",
            "All the best. Do try and see if there\u2019s a way to get into the IT department in the military. Do not throw your skills away.",
            "Computer science hype is over. Now literally everyone can be a swe. People are better finding real jobs.",
            "My 1 there in the end is \u201cSign up for McDonalds\u201d",
            "Hey, this really isn't an L. A lot of people don't even have the option of joining the military.",
            "How do you create these graphs?",
            "Keep working on your skills on the side.",
            "With security clearance you can work on top AI and robotics jobs, you get some education and exercise. Not a bad tradeoff ngl, if my country had military and a actual jobs I would consider it too. But can't join the British army   without nationality and the time it will take to get it I can get a security clearance and a programming job I hope, or I will starve, either way.",
            "Not a terrible idea\u2026 Amazon has special applications for veterans",
            "Yes, definitely go defend the country that is currently fucking you over.",
            "\ud83e\udee1",
            "How do you make this graph?",
            "[ Removed by Reddit ]",
            "Thank you for your service \ud83e\udee1",
            "Jokes on you op, we're prolly going to proxy-war with iran in the next yr or so \ud83d\ude05",
            "Maybe try applying for a job you can actually get that pays towards the low end of the market.\n\nIf you have any experience at all, there are way more CS jobs than there are qualified candidates to fill them.\n\nCommunity Colleges and museums and such are usually pretty easy to get a job at because they don't pay well, but the experience is still valuable.",
            " Time for me to cut some weight so I can join heard boot camp is brutal",
            "F",
            "Which app for that diagram?",
            "That\u2019s rough :(",
            "Good luck bro! It\u2019s a choice I thought about making too. \ud83e\udee1",
            "I say all the CS guys on here form a business together. This is the future I think\u2026\ud83d\udc40",
            "It\u2019s so over for u, BYE BYE",
            "how do I do this application graph?",
            "Why do these posts get so many upvotes? Thanx for the motivation. Are you\u2019ll secretly in the military?",
            "At this point I can't even differentiate betweem sarcasm and realism.",
            "181 applications is tiny for job 1",
            "Just going to leave this [gold](https://www.youtube.com/watch?v=CIXJhan8g40) here. Good luck!",
            "Jesus, I\u2019m telling you you aren\u2019t interviewing well.  I got 3 interviews and 3 offers.  Clearly you are doing something wrong",
            "\ud83d\ude2d\ud83d\ude2d\ud83d\ude2d",
            "An easy option if you\u2019re in the us lol",
            "\ud83d\ude02 I\u2019m fucking dead",
            "What do you need to do to get an intel gig at the military? Thanks",
            "[deleted]",
            "Good move. Seriously. Make the most of it.\n\nWhich branch are you joining?",
            "181? Rookie numbers.",
            "This is a joke right? I've been seeing this waaaay too much for it to just be a joke.",
            "Lmao I had this same thought last night",
            "Join as a computer systems officer",
            "Ive gotten only like two interviews and like 10 OAs with at least 600 applications so....im jealous",
            "https://preview.redd.it/q7dfo54ep9gc1.jpeg?width=1080&format=pjpg&auto=webp&s=5ff7dcaa5790dab0d356569d9f106937e7fac82c",
            "Which country?"
        ]
    },
    {
        "post_id": "1ck20nk",
        "author": "ShapeSquare",
        "title": "CS jobs now have immortality as a requirement (310 years of experience)",
        "url": "https://i.redd.it/68n9a5x4afyc1.png",
        "score": 1992,
        "num_comments": 71,
        "created_utc": 1714834114.0,
        "selftext": "",
        "permalink": "/r/csMajors/comments/1ck20nk/cs_jobs_now_have_immortality_as_a_requirement_310/",
        "comments": [
            "Have you tried being a 10x engineer for 31 years?",
            "they definitely have someone specific in mind",
            "Programming since before the US was founded",
            "If you\u2019re a good enough programmer, you should have already transferred your consciousness over to a robotic body and therefore be very long lived if not immortal.\n\nI thought this was common sense? All the juniors are doing this now.",
            "![gif](giphy|XpxVDWILLXC92|downsized)\n\nMe walking to the job interview",
            "Umm 310 years doesn't mean immortality. Realistically no company can expect a potential employee to be immortal. But if you can't even stay alive for 300+ years and have peak mental capabilities, then sorry to say but maybe CS is not for you.",
            "what's the salary then?",
            "We need to find who they have in mind for this \ud83d\ude02. That person has the secret to immortality lol.",
            "Entry level. Candidates without a millennium of experience or more need not apply.",
            "is specified for elves.....",
            "Vampire programmers need their space too",
            "At that time you should not just be familiar you ought to be goddamn God of multithreading",
            "Hyphen '-' can make big changes in requirements",
            "damn one year off.....",
            "Ahh finally a job I'm qualified for",
            "\"I have slain......my enemies\"\n\n\"I have seen the end of time\"\n\n\"I have domesticated a small pack of primates....currently trying to teach them JavaScript\"\n\nhttps://preview.redd.it/krt6y5ow3iyc1.png?width=1850&format=pjpg&auto=webp&s=31b8850f80e3655bcadc3fe9fa53f1aef9b6c133\n\n[Krazam my beloved](https://youtu.be/eSqexFg74F8)",
            "1 limb per computer ez",
            "Inspect element dev tools go wild",
            "This job ain\u2019t for smooth skins.",
            "Better start building.",
            "Show up with a quilt! Looms the original computing system",
            "I can\u2019t stand job apps in general they make even the simplest jobs sound so complicated like bro just tell me what the day to day is not all this jargon",
            "Entry level?",
            "You\u2019d think someone would start their own company after the SECOND century but no\u2026",
            "I qualify",
            "That's probably for an entry level position.",
            "we're cooked",
            "It's fkin criminal that we gotta put so much effort into our resume to not get rejected by ATS and yet the recruiters are so lousy with job descriptions.",
            "blacklisting ascensus now",
            "Sorry that\u2019s supposed to say 31",
            "Pretty sure this hiring manager or recruiter who ever post that job hates that company",
            "makes sense thats about how long some java error messages would take you to read",
            "Yes my great great great grandfather\u2019s uncle helped build the foundations of what is referred to as modern computing, but he does not have LinkedIn though",
            "Looks like a job for the Vampires :D",
            "Hahhahaha omg I died laughing \ud83e\udd23",
            "companies wanting candidates who know how they resolved bugs in production in their previous birth",
            "\"i work 800 hours a day\"",
            "Man I will recently complete my degree in Computer Science but I hate the profession soo much! Willing to switch to some other profession soon.",
            "Weak try 1000",
            "moreover you have to be fit(to go to office) or client and young <35",
            "God is hiring for his new website",
            "Certainly! I have 356 years of Spring 3 development experience.",
            "I bet this has 1000+ applicants",
            "The year is 2160, seniors now assimilate juniors fresh out of college for an additional 4 years of experience just to get a promotion.",
            "Oh, give 'em a break. I'm sure they meant to put 30."
        ]
    },
    {
        "post_id": "1bmzryz",
        "author": "Floaaf",
        "title": "Went to a hackathon, realized I don't know anything AT ALL.",
        "url": "https://www.reddit.com/r/csMajors/comments/1bmzryz/went_to_a_hackathon_realized_i_dont_know_anything/",
        "score": 1994,
        "num_comments": 164,
        "created_utc": 1711325175.0,
        "selftext": "I started taking CS courses in fall 22, and I am about 10 courses away from graduating now. My grades in my classes are great, and my school is known for having a slightly more applied curriculum than most. Unfortunately even that is not enough. I can ace data structures/algorithms and discrete math all I want, but I don't have the capability to so much as START a project.\n\nToday I went to my first hackathon. I spent 10 hours trying to set up a database on Amazon RDS. I couldn't even do it. I'm not even sure if Amazon RDS is made for projects. I don't know ANY tools for developers (not even the names of these tools). Someone mentioned an \"environment variable\" to me the other day, I still don't know what that is. Despite the amount of credits I have taken, I am in all honesty, a beginner. Yet, I am on borrowed time. I want to get at least one internship before I graduate but my skillset is seriously concerning me, and I'm panicking.\n\nI'm looking for a general direction for someone like me, or at least a list of very small baby steps. \n\nEdit: oh boy my little rant blew up online \ud83d\ude2d. All my friends have seen it, i should have used an anon account \ud83d\udc80",
        "permalink": "/r/csMajors/comments/1bmzryz/went_to_a_hackathon_realized_i_dont_know_anything/",
        "comments": [
            "Honestly what helped for me was doing a simple full-stack project, and then adding to it as a base, and a lot of the initial setup and work was just going through tutorials, looking at documentation, etc..\n\nSpecifically, I've only used C++ in my classes, but followed tutorials and such to make a static front end using HTML+CSS. Then, I followed more tutorials to make a Flask (Python) backend with a MongoDB database. Then I connected it all together, making a full stack web-app. Then I put in a ML model I was working on into the backend. Then I deployed the web-app by following tutorials, etc. etc.\n\nLong repetitive process description aside. What worked for me was following tutorials to get things working one at a time, then tweaking/building/piecing together components to gradually create something whole.\n\n*Edit: Just wanted to add that doing this project on my own, and learning stuff outside of school was the only way I got an internship. I'm currently just now taking DSAs in school, but did a pretty large scale project over the summer, during the semester and during winter break (that I discussed above) that was all self learning in ML, NLP, web dev, and embedded. When it came time for interviews, we didn't talk about anything I'd done in school. And for both places I got offers from they wanted me to do work very similar to part of my project, and said they were interested in me because of what I'd done on my own, outside of class.*\n\n*Edit* ***TLDR***\\*: doing your own stuff outside of school (hopefully something your interested in), as well as proving you're a capable learner is huge for giving you an edge in the current competitive market\\*",
            "It sounds like you're learning a lot but are missing some practical skills and knowledge. I'd recommend this online course: https://missing.csail.mit.edu/. I recommend it to a lot of fresh hires and it's really helped some people.",
            "You\u2019re seeing the disconnect between school and industry. We all need to fill in little knowledge gaps for ourselves depending on what our programs missed, but the only way to find out what you don\u2019t know is to try projects on your own outside of school. But a hackathon is a little too fast paced for a first full stack personal project. I wouldn\u2019t beat yourself up. Just identify the things you need to learn, do some side study, and build a small side project at your own speed. If you wanna use AWS tools, maybe do a quick YouTube/Udemy course to familiarize yourself first, and if you don\u2019t know environment variables, maybe go through a Linux System Admin course (I did exactly that when I realized how much my program sucked in this area).",
            "No school actually prepares you for the real world; the job of formal education is to give you a framework for figuring out solutions to problems. \n\nOne of those should be \"how to find answers to questions\". Google. I don't know what it is about some CS majors that think Googling and YouTube tutorials are cheating, but your degree is not going to and cannot teach you every language, framework, API, or stack.\n\nMy scripting course taught me Python. It didn't teach me about Unreal Engine's Python API. I had to figure that out on my own because it's my job.",
            "Env vars and other such things are generally covered in a course called something like \u201cSystem Programming\u201d. Look at your course catalog, if it\u2019s not a required course, take it. Topics will include Linux file systems, shell programming, scheduling processes/threads. \n\nAlso take a Networking course and a Database course (ideally a Database Design course, not just a course about databases but one that involves implementing pieces of a relational database).\n\nRDS is AWS relational database offering, you can run Postgres or a variety of other RDS engines. It\u2019s not trivial for someone with no knowledge to set up.\n\nStart off by installing Linux on a partition or another drive, try to install Postgres and write some stuff to it, maybe try a small project to load and display info about a subject you\u2019re in (in college I did Magic: the Gathering cards and a barebones GUI. The stack was MariaDB and Django but today I\u2019d use postgres over maria).",
            "You just need to start making stuff on ur own. Find something that you could make that would make your life easier, then the next, then the next. The more time you spend making things the more technologies you learn/learn about and it all compounds into you having a good idea on how to approach problems",
            "Oh bro you are so solid. You\u2019re going to hackathon type shit and it gives you moments like these where you\u2019re pushed to step up your game. Make some projects - solve already solved problems but do it from scratch. I was feeling just about how you are at your point, and then come my senior year, still more or less feeling like too much of a beginner to even be worthwhile. Managed an internship this summer and it\u2019s for iOS, don\u2019t have any iOS coursework complete, but the employers loved the non-school stuff on my resume enough that they weren\u2019t worried about me picking it up.\n\nIf you have the drive to learn, it\u2019ll show, and employers will like it. A self-motivated learner takes a lot less babysitting to get up to speed",
            "This is a problem with CS degrees in general. People who put their time into school come out totally unprepared to program.   \n\n\nThe easy way to handle this is to hop on some place like Udemy and take one of the many $10 courses on building full stack apps. If you're confused about things like environmental variables, you should also spend some time getting to know Linux in your second $10 course on Udemy. ha ha.  \n\n\nUdemy tackles the parts colleges fail at quite well for an incredibly low price.",
            "Watch JavaScript mastery full stack project tutorials on YouTube. Just pick any and do the whole thing. You will learn by doing and eventually will be able to make your own project with your own stack of choice. The only way to get better is to actually do it",
            "Totally random but it\u2019s ok to not know anything. I\u2019ve gone to hackathons and I was once in your shoes. Just work little projects and work your way up to big things :)",
            "Leetcode \u2260 developing skills\n\nYou\u2019re still a newb who only knows how to solve very specific problems that we barely run into the real world. Good thing is you can apply to big companies and can ace the test. Smaller or mid sized ones idk",
            "Spend $13 on a full stack course from Udemy. Type every line of code along with the instructor. \n\nWith this, you\u2019ll at least have some exposure to project setup and the various tools related with a particular stack.",
            "Like others mentioned, doing projects can help. I'll tell you this though - AWS is a bitch and a half to set up. It's ridiculously complicated and you'll never have to do it yourself unless you're literally the first engineer at a startup - otherwise it'll have been done for you.\n\n&#x200B;\n\nFor a hackaton or for personal projects I'd recommend you go with something a lot more user friendly such as Supabase. You get free, hosted Postgres which allows you to dive into the interesting bits (actual code/SQL queries) without fighting AWS to try to get your configs all set up.",
            "I went through the same thing. Definitely try to do a very simple full stack project with React or something.\n\nThe experience only comes with doing some projects. Then, you\u2019ll slowly realize that everything is connected in some way from the electrons in a transistor all the way to the pixels a user sees.\n\nAim to be able to explain that in the context of any website/app, e.g. explain the flow of a byte of info in YouTube servers going all the way to the user and back.",
            "This is the biggest misunderstanding about CS. They don't teach you how to be a **developer**, they only teach you theory and the \"micro\" of it all. They don't really teach you how business models for various software products actually work, which tools are common and how to use them, etc.   \n\n\nWent through that stage my self and all I can sat is Get from A->B.  \nNeed a webapp? build one. from scratch.   \nNeed a second webapp? build another. from scratch.   \n\n\nSame thing happened when I learned Git (also, for the love of god learn and use git in all your projects if you don't already. You're kinda unable to work on a team if you don't know git). I started soooooo many projects from scratch just to test how git works. Then figured out how .gitignore, then rebasing, then cherrypicking, then, then, then..... starting a brand new project every time from scratch and building it out.   \n\n\nThis is how i tought my self how to intuitively and instantly use python, python environment, C/C++ makefiles, Cmake, Modules in C/C++ (like imports), the gcc, gdb, and all kinds of other more big-picture things to make projects.   \n\n\nEssentially if you can't point to an artifact that you've learned something that isn't just notes, you probably didn't learn anything, and probably nothing that you can actually apply to anything.   \n\n\nDynamic programming is cool, but if you can't actually use tools to interact with your system and do stuff with that system, then your knowledge doesn't mean jack.",
            "This is why students have a hard time getting jobs, btw. The combination of zero practical xp + high salary demands is hilarious for employers.",
            "Same here, you learn a lot at a real job/internship",
            "dudee it is great that you don't know nothing at all. Anyone that can stand there and breathe stably the whole hackathon can definitely work in software engineering at a certain level.\n\nThe question is in the next 10 years how will you go about things as to maximize your potential ceiling",
            "CS doesn\u2019t prepare you for the practical stuff, it builds a foundation that makes the practical stuff easier. You\u2019ll get there. Start tackling side projects, finding some open source to contribute to, or shoot buy a few $10 Udemy courses. \n\n[This video nails the subject](https://youtu.be/dkA4BjoVIYo?si=mSTfzhpoQGXjtxx_).",
            "- Watermelons were originally engineered in an attempt to cure despair during dark winter nights.",
            "You misunderstood the meaning of hackathon. \n\nYou have to put together a silliest version of a project with the scrappiest of tools / already built solutions.\n\nNobody cares if it\u2019s fault tolerant, or if scales with users. \n\nHell, if u can make it work locally you are good to go.\n\nYour only job is to win the hackathon, not make the most complicated architecture.\n\nNext time choose a ready made solution, like a supabase  or another other alternative which solves your your issues.",
            "I'm in my second year of a CS degree and I can tell you most of my classmates are in the same boat. Those skills rarely come directly from university modules.\n\nI enjoy learning and applying more of the practical stuff so I spend my semester breaks learning stuff like this. Do personal projects, make some that you can show off after you graduate too.\n\nGood luck",
            "To be fair, I also blown up my first and second hackathon, doesn't derail me from toying around with Aws nowadays.\n\nTo do hackathon you need to be prepared, and from what I saw, except you've been doing tinkering left and right for the last three years, you'll blown it too.\n\nI did two type, a development one and a real hacking one, the first one made sense, second one seems a bit, strange, it was literally putting a POC together for 2 days straight... Didn't feel or learn anything interesting.\n\nDon't be too harsh on yourself, it takes time to get in all the knowledge such as environment variables and all those things you've yet to discover, if you need any advice, install linux on a spare device and force yourself to use it",
            "Haha, every CS student has this experience. Now you know to spend a lot more of your free time reading and building projects and learning about different tech stacks and gaining depth-wise experience in them.",
            "So you've discovered the second of the three pillars of working in computing, and it is called devops (or at least it is these days). I can't recommend specific texts to you, but I'd get / find something on Linux scripting, containers/docker, and general devops to start.\n\nThe good news is you aren't alone - few CS courses teach this, just as few teach the third pillar of actual software engineering - how to do things like pick the right design (at all scales of the architecture), how to debug running systems, understanding how business needs interact with technical ones, etc.  But that's also mostly experience based learning once you get past the basic elements like design patterns (which if you don't know about, go read the gang of four on design patterns, it's literally the book).\n\nSo fundamentally, it's fine. You are expected to have gaps coming out of uni, but be aware that you have a lot to learn, and you are never going to manage to learn it all in this field.\n\n(Source 20+ years working as a software engineer across multiple industries and having done technical interviews on somewhere around a hundred grads).",
            "\n20 year dev turned principal architect here. \n\nI\u2019m often involved in the technical hiring decisions at my company, so I get to interact with a lot of new grads. Staying up-to-date with the CS learning experience is one of the reasons I follow this sub. \n\nIf I really had to nail down what\u2019s led to my success over the course of my career, it\u2019s the ability to quickly go from having zero knowledge about a thing to being competent.\n\nAnything you do to refine that process is time well spent. \n\nI hear plenty of replies on this sub spinning some yarn about how you\u2019re laying a necessary technical foundation blah blah blah. Others say your degree is crap and practical experience is the only experience, with their noses high in the air\u2026 \n\nThey\u2019re both BS (degree pun intended). \n\nThe process of gaining Mastery is never wasted effort. The earnest pursuit of knowledge in your chosen field is never wasted effort. View your education as a journey, rather than a destination.",
            "You sound like you're doing well, you just need to build that project muscle. One of the not so fun aspects of development is getting your environment working, and that's a constant headache you get better at but never amazing. What you did actually was probably a big learning even though it might not feel like it.\n\nFor hackathons you can think about finding the most dead simple example online of a backend, probably self hosted, and skip everything but the hacking part.",
            "Listen to me homie. You\u2019re in the perfect position right now, you\u2019re about to have the dopamine rush of a lifetime. You know the fundamentals, but you don\u2019t have a tech stack. All you gotta do is get yourself a tech stack. Pick-up whatever language you like for Backend, pick a front end JS or Visual development framework and a database. Some deployment tools would just be the cherry on top. Right now, you\u2019re in a candy shop, you get to look at all the candies and get to imagine what it would be like to eat them. But you only have two hands, so you gotta pick.\n\nHave fun homie",
            "projects projects projects\u00a0\n\ncerts certs certs\n\nOP u need to get the AWS SAA-C03 cert; even if u don\u2019t end up using it it will be helpful to get started and employers will be impressed by it if u do do as a college student\u00a0",
            "I had the exact same experience at a Google BGN hackathon, probably my worst CS experience but definitely a needed one",
            "!remindme 1 month",
            "Just start building projects or find someone who has built projects and ask to build something together.",
            "You think anyone showed up on day one and knew what they were doing?  Even if you master this you'll go to your first job and they'll use some tool you never heard of with some obscure proprietary language that's like a mix of Python and SQL and once you mastered that you'll go to another company and learn their tools and programming languages. \n\nIf you understand the concepts the rest is just syntax.",
            "that's okay!",
            "!remindme 5 days",
            "A hackathon isn\u2019t a test of skills but rather how fast can you adapt to something.\n\nNvidia and Intel hosted one at my school designed to use AI models for a data engineering project, there wasn\u2019t even a class at my school (maybe the invited schools have one) for this topic so most of it was just learning on the spot trying to at the bare minimum have a working prototype.",
            "This is what most people feel doing a particularly difficult internship or with their first job out of college. You learn a lot in school for sure, but making changes in an existing code base, with multiple tech stacks in the front and back end, is impossible for a new grad at first unless you did a shit ton of personal projects and study. And this USED to be the norm. Junior engineers are expected to be like you've communicated in this post bashing your head into a concept for 10 hours. The secret is even after some months you don't feel like you're caught up",
            "Following",
            "was it rutgers by any chance?",
            "Best piece of advice that I can offer is to not be afraid of fucking up and just starting a project. Just fucking start. Learn as you progress. This is a classic battle between theory and practice, so you\u2019re not alone.\n\nThe remedy is to just DO.",
            "!remindme 2 days",
            "Well extremely glad that you realized you know nothing this young. Smells of smartness, you will do well. \n\nI realized I know nothing only post 30 when I chance discovered Knuth's books. But it was comforting to realize that there's indeed too much knowledge to digest. \n\nNow for AWS RDS though not sure what the issue is. Did you set up a proper vpc, nat gateway, gave correct creds to rds, used right drivers to connect? ChatGPT couldn't help or you didn't try asking?",
            "Damn if you don't know what an environment variable is then... yeah. At least you've got your eyes opened now.\n\nYou now hopefully understand why a CS degree counts for fuck all on it's own when looking for a job.",
            "I got my CS degree 30 years ago and I knew at the time it was of little practical real world use, but what it taught me was how to learn, how to ask questions, how varied everything was (and often specialist).\n\nWhat you need is curiosity and a willingness to learn on your own back, because you will be continually learning throughout your own career.  Tools change, languages fall in and out of favour, technology changes, or you end up in a specialist industry that is a whole new ball game.\n\nYou had a good wake up call as to just how much you don't know - you will always find things you don't know.  Start asking yourself questions of 'how do I?' and work on projects for yourself, something that interests you.  Use what you've learnt to learn new things, to spark your curiosity and interest.  In all the people I've hired, the biggest thing I look out for is people who have encountered things they don't know and done something about it.   It might not be directly applicable but I know they have the drive to learn what is needed and not just wait to be taught.",
            "Math they teach in college dosent help you in you cs career that much",
            "Follow some YouTube tutorials. Anything you find generally interesting. Find a tutorial and do it. \n\nYou\u2019ll get used to some general tools pretty quick this way",
            "You are probably fine. One of the things you will need to learn is how to teach yourself new technologies. It's hard to tell from your post if you've picked that skill up yet. The good news it sounds like you have time still.",
            "Maybe need more internship experiences?",
            "Just work on some projetcts. Cs and programming are very different. They're just talking about a production enviroment variable. Just build some full stack apps. You'll understand more. Try setting up your system. I use linux and play with my pc a lot. And bash. You don't have to do all of that. Just start writing code in your free time sometimes. You're smart enough.",
            "I know someone as clueless as you with 3 faang internships. Have you tried switching races?",
            "Bro I went to one at ucla and no one wanted to partner with me :( \ud83d\udc80 I left early",
            "hey! Don\u2019t be demotivated. Academics are necessary for foundations. Hackathons, in general, are sponsored by industry so they expect very applied and practical stuff. A person with strong foundations can pick it up in a year or two!",
            "If you aren\u2019t struggling, you aren\u2019t learning. Try and fail over and over again. Eventually, you\u2019ll have learned enough and won\u2019t fail.",
            "If you\u2019re looking to start a personal project, I would consider looking at Google Cloud over AWS. I\u2019ve used AWS, Azure, and Google professionally and personally over my career and have always found that Google is much more developer friendly, their interfaces much more intuitive, and their documentation (especially when you\u2019re trying to do something new) much better.",
            "I hate these kinds of posts. You think you don\u2019t know anything because you can\u2019t do some dumb simple thing, when you yourself realize you can do lots of hard complex things. You don\u2019t know nothing just because you can\u2019t setup a database; you don\u2019t know how to setup a *database.* That\u2019s one thing, not everything. You know who else doesn\u2019t know how to setup a database? Me. Never done it except maybe once in college? Do I know nothing? Nope. I work a cool low level job and make a lot of money.\n\nI understand the way you feel though. I remember in college there was some hackathon project where you were given an Arduino and had to do some gyroscope thing with it and I had no clue how anyone could do that. Now after being in the field, I realize that those specific things are much easier to figure out than I first thought, and that those things are basically just trivia. The real knowledge is all the reasoning you learn in undergrad. That\u2019s serious lasting knowledge if you did it right.",
            "I think a defining moment of every CS student is finding the perfect balance between CS within academia and CS within practical industry knowledge. During college you\u2019ll think the stuff they teach you is fluff and useless, but when you work in the industry you\u2019ll find that the things you learned helps you solve everyday problems on a deeper fundamental level. \n\nMy advice would be follow a couple of tutorials on youtube where they set up an API and build a web app that interacts with it, or builds a web app with a third party API so you experience using API keys. \n\nAlso PLEASE PLEASE PLEASE look at [Github Student Pack](https://education.github.com/pack). It is free with university email and gives you tons of resources to learn and use like free Azure and digital ocean credits (online hosting platforms)\n\nThis may be a little overwhelming, it is for everyone at first, but you got this!",
            "I was in a similar situation when I graduated college and got my first job. I was tossed into the world of aws, cloud native, frameworks and such. The good news is that you have a grasp of data structures and algorithms. This means that you are good at problem solving. In the workforce all those data structures and algorithms have been packaged into frameworks such as Spring boot and .NET. These frameworks basically help you not reinvent the wheel. I recommend learning Spring Boot or .NET. With spring environment variables are handled via profiles. I recommend looking at https://www.baeldung.com/spring-controllers",
            "I think you did well. The whole point of a hackathon is to learn, and if you realized there\u2019s things you don\u2019t know spend some time to work on them. \n\nWhat I\u2019ve seen help people is : \n1. Work on guided projects through MooCs if you have money or find a blog/ YouTube video and follow through. \n2. Think of an idea you\u2019d like to implement and figure out what you need to learn to implement it. With ChatGpt etc this becomes easier in terms of pin pointing what skills you need \n3. Join a team during a hackathon and complete small pieces that might help you get started \n4. Attend workshops at the hackathon to help you learn \n\nThe point of a hackathon is to build something that you\u2019d be proud of but also to learn.\n\nAlso don\u2019t worry too much about specific technologies, focus on 1 technology and try to implement it well. The industry has different wrapper around the same tools with minor mods. The skills will be transferable",
            "And \u2026 welcome to real hackathon",
            "Environment Variables are like global variables. But they exist outside the application for the current users operating system session.\n\nThey are typically used to set configuration settings prior to starting an application.\n\nYou would set an environment variable to tell your application where to look for the database. Or maybe set a connection string. You could put encryption keys in there so they aren't hard coded into an application. Stuff like that.",
            "[roadmap.sh](https://roadmap.sh) is a good start for baby steps",
            "Lol don\u2019t worry man I have a similar story. I think around junior year I went to some hackathon with my friends having gone to a college with a pretty good cs curriculum. We honestly couldn\u2019t do shit and just ate their free chipotle haha. Now I\u2019d say I\u2019m a pretty solid dev. At the time though I  had a similar sentiment as you. We still look back and joke about that experience to this day\n\nAs others say, just get started by making a full stack project. Maybe a smaller step would be to make a nice portfolio site (mainly frontend) which would help you get jobs later on anyways. I think the issue lies in that a lot of college curriculums are more theoretical (at least mine was) so it doesn\u2019t feel too useful at the moment. But don\u2019t worry it\u2019s way easier to learn the practical than to understand the theoretical, just keep grinding at it you\u2019re doing the hardest part already. Plus you\u2019re already going to hackathons which shows an actual interest in development and a great start.\n\n[This roadmap](https://roadmap.sh) was posted a while back on some coding related subreddit, maybe it would help you get started. Also [patterns.dev](https://www.patterns.dev)",
            "I wish I could tell you it will all become clear with time. It won\u2019t. It might get better in whichever application and language you end up working professionally. But getting full mastery will likely never be attainable.\nGet an internship. ASAP. Getting actual hands-on knowledge is the best thing you can do at this point.\nSchool provides a wide and general view of what you might expect to see out there. If you go into embedded systems, for instance, big O will not be a thing. But pointers and stacks and memory management will. And the more you use them and read about them the kind of better you will get at them. \nBut even if you learn about embedded systems, there are several peripherals and microcontroller architectures and compilers and build methodologies and IDEs and \u2026 you get the idea. Too much for a single human when a modern multicore microcontroller has an 8-9 thousand page manual. \nAll in all, try to get as knowledgeable as you can on whichever area you decide to focus on (or happen to focus on, it happens this way for most of us) and don\u2019t think to much about the vast ocean of things that are out there to learn. My 2 cents is going down the internship path.\nBest of luck and see you in the battlefield some time.",
            "It's because you have to code projects or follow tutorials on your own for projects to get farther ahead. School is great it teaches important stuff but not always",
            "CS major !== web developer, so, it's no wonder you're feeling intimidated.\n\nYou just tried to do something that involves a lot of in depth knowledge of tools you've never heard of before. It's like going into FromSoft games without doing any research into their catalogue and being confused why it wasn't like playing Zelda Tears of the Kingdom.",
            "good child ... now you know what you don't know .. how to do a project from start to the end ... so do it .. make a little project ...",
            ">Despite the amount of credits I have taken, I am in all honesty, a beginner.\n\nYes. This is a feeling that is to be embraced, not one to be ashamed of. Technology changes quickly and makes us all feel like beginners once in a while. What you need to do is to use your existing understanding from your CS degree to make sense of new technologies as you meet them. The value of your degree then arises from decreasing the amount of time that you are a beginner in any particular thing.\n\nGo to hackathons to find mentors, not to show off your skills. Work through problems and ask for help. Hackathons are focused time to try things with like minded people with no particular expectations on results.",
            "Ask the person who gave you the tidbit about environmental variable what it is and how to use it. Don't be afraid to say you don't know something",
            "Well yes you\u2019re studying computer science not software engineering. If you want to become a software engineer you\u2019ll have to learn on your own.",
            "One thing I find interesting and reminds me of an exchange I had online with a kid starting a CS program a couple years back is how even some kids choosing computer science have a much lower on average understanding of computers than most had not even that long ago and it's because they interact with software in so many other ways than just a traditional computer. I felt behind my peers in most things having zero programming experience when I started and even I had been modifying my PATH for years at that point. To me that's just intermediate level general computer literacy. Not knocking anyone, it's just a product of the current environment but it's something that might be falling through the crack in education.",
            "student hackaton ? like.. in belgium, mons ?",
            "I was in the same boat when I graduated. You\u2019re fine, don\u2019t underestimate yourself. See things through to an outcome and don\u2019t be afraid to fail.",
            "When I started CS I zero knowledge of programming.\n\nDid some python, did some assignments using Python, and it's all cool but all I could do was show off my ability to write a recursive function.\n\nEventually I got into reverse engineering 3D data formats. Python was an option to parse binary data and load it into a tool to render, and I started using programming to accomplish things. I didn't know how 3D renderers worked and I still have no idea, but it really doesn't matter if you're not planning to work in graphics.\n\nI then started game development, specifically writing code. I was able to take inputs and create the required outputs. Others came to me with their programming problems because I happened to know how to code. I would design and implement solutions based on their specifications, and some of them even paid me for my time although for me it was just another programming challenge.\n\nBasically, the most effective way to learn is to do projects. You'll quickly learn what you don't know, and then you'll go and look at examples of how it's done. You get into the habit of thinking about how to use programming to solve problems, and all the different tools that others built to solve those problems.",
            "Was in a similar boat my freshman/sophmore year. Figured it out by Junior year and interned at Google, knowledge compounds. Keep at it and don't lose hope",
            "you gotta build projects bro. Like a database setup is suuuper easy on RDS, but having never done a project where you needed one you didnt know the process. You just gotta do it a few times to practice. once you do a project where you need to deploy to the cloud and have a db, youll remember how to do all that next time at least at a high level and youll know exactly what to look up and itll take 10 min not 10 hours. Build some project with a real backend, with crud functionality that uses a database, deploy it all with docker onto AWS. you can have the frontend look like crap if you dont want to do frontend work for a career. you just gotta get your hands on the tools.",
            "befriend people who get internship aka join an org with a lot of successful CS majors. easiest way to learn and get on track. you are who u surround yourself with.",
            "I graduated with flying colours. I thought i was good. Then i joined industry & i was so fucking miserable it\u2019s not even funny to remember those 5 months \ud83e\udee0",
            "Just accept defeat, we\u2019re all fucked",
            "Yep. Colleges don\u2019t give a shit about teaching skills relevant to actual dev work. They totally could if they wanted because dev skills are very much teachable and not terribly hard if you know what to study. But colleges don\u2019t give a shit about preparing students for the job market. They just do what they have done for the last 30 years and collect all the money they can get their hands on from individuals, their parents, banks and the federal government.",
            "1) Get on YouTube and follow a tutorial to build something. Anything. And then do it again with something with a different tech stack. It will get you traction and orients you enough to start finding out what questions to ask. Once they do something that confuses you, pause and go look that topic up.\n\n\n2) Do more projects, but for your own ideas. Just begin, and start researching how to solve specific problems when you hit them. Also, don't worry about what tech to use or what the \"right\" way to use it is. You'll see a lot of very opinionated takes. But spinning on these is a waste of time when you're starting. It's MUCH more valuable to cut yourself on the sharp edges of tools and form your own opinions. That goes for libraries, languages, editors, operating system, keyboards, whatever.\n\n\n3) Go to meetups and start talking to people who do what you want to do.\n\n\nBasically, you sound like me almost 20 years ago. I didn't even know what a web server really was. I just kept in mind that I needed to immerse myself in the field. And it's worked out well.\n\n\nGood luck to you. And remember to have fun!",
            "Look for CS courses with capstone projects.  Then create a full stack app to implement whatever project you dream up.\n\nNo better teacher than doing, especially once you have the basics.",
            "that\u2019s because college isn\u2019t going to actually teach u how to build anything it only teaches u fundamental and theoretical parts of cs and programming",
            "!remindme 6 months",
            "lol you gotta study",
            "Do things. Do projects. Copy cat something you have seen and build it for yourself.",
            "Here are a few skills/tips that I wish my college drilled into us bc they became extremely useful and transferrable within my computer science career:\n\n1. LEARN HOW TO USE THE COMMAND LINE!\nLearning how to move around the file system, how to SSH into a server, how to edit files, how to clone and use git repos, and how to use curl commands will all be extremely useful at some point.\n2. Learn how to read API docs and connect to APIs \nEveryone (websites, apps, etc) is turning to APIs to make their data accessible. So, knowing how to interact with them is key to data retrieval a lot of the time\n3. Learn basic data cleansing\nGetting the data down from the cloud or a database is one thing, but doing something meaningful with it is another. Learn how to extract the meaningful stuff\n4. Learn Github for real\nPutting your code thru some type of version control will save so many headaches; documenting everything in the README is great for you and everyone else to remember how to run the project; a LOT of reusable code you can use is github\n5. Do projects of your own outside of work/school.\nHaving an idea, gathering the skills and components to build it, and then executing successfully is an invaluable process that will only help you moving forward\n6. Try doing projects that include both hardware and software like a Raspberry pi or an Arduino.\nI was in a software program so we rarely worked with external hardware outside of the laptop I was sitting on. But a Raspberry Pi will significantly increase the amount of things you could do with software if you are creative\n7. Understand what skills are relevant to you instead of learning everything under the sun.\nLiterally google your desired tech position, then add \"skills needed.\" That should at least give you a ball park on what you need to know to succeed in that sector\n\nI hope this helps, and good luck in your computer science career!",
            "You don't have to worry, I felt the same a few months ago, just kept \"trying\" and \"testing\" through building small and big projects, got to learn new stuff and concepts just like that, and what seemed to be IMPOSSIBLE everytime made 100% sense after I looked into it for a few days.\n\n\nSo relax, get that degree and just work on side projects. It should be quite do-able if you're acing it.",
            "\"Despite the amount of credits I have taken, I am in all honesty, a beginner.\"\n\nThis is absolutely true and to be expected, though I do recall how when the realization hits you it's a shock. Much of what you do in CS is theoretical and though there may be a decent practical component, it's very, very basic and set in an idealized environment. Tech jobs are high paying because not just anybody off the street can do the work. It takes years to become good. This reality is contrary to the lingering belief a 6mo bootcamp is a ticket to easy street. A rather annoying hangover in the minds of many young people who picked it up during the bubble peak of 2021 when it almost seemed true for a fleeting moment. Only to be ripped away from us unmercifully. Ah the wheel of tech! Absolutely nothing new.\n\nYou definitely do have a lot of knowledge from a CS degree you just need to supplement it with more hands-on. Since graduating 20 yrs ago I've done three applied tech certificates amounting to a few dozen courses. Also numerous vendor certs. It's not easy and if you ever rest on your laurels in this sector, you'll one day look back with regret at that point where it all went wrong.",
            "chill bro  \n\n\ni work in azure core and I didnt know how to deploy a db till 1 year in (never had to)\n\nit took like 1 day of learning but you pick up skills as you pick up work. in your case, to accelerate learning, do some easy projects like a monthly expenses app with AWS because that is the most popular cloud provider and go from there. good at swe != good at theory, best swe can keep learning and pick up new skills relatively quick.",
            "Just ship projects, this is how you'll learn.",
            "!remindme 35 days",
            "School is great \ud83d\udc4d",
            "If you go to a hackathon and you dont know how to do a thing, either pick something you can do, or ask if you can pair with someone who knows it, so you can learn.\n\nDont beat your head against the keyboard, wasting time. \n\nPairing is an incredibly efficient way to level up very quickly. Do it as much as you can.",
            "I am here to tell you I banged my head against a wall in a university hackathon 10 years ago, left quietly in shame way early. Today I work as a tech lead at Google. Rome wasn\u2019t built in a day. \n\nHackathons are honestly more for the kids who started programming in high school or learn these technologies in clubs. You will be fine.",
            "not that you deserve it, but just do University of Helsinki\u2019s Full Stack Open. \n\nLiterally just google and ask your peers for steps.\n\nPS: am a self taught software engineer.",
            "That\u2019s totally normal. It\u2019s not you it\u2019s 100% the college curriculum. I\u2019m a devops engineer 2 yrs in, switched from CS to IT about 3/4 of the way through. It was astonishing how much I learned in my first year on the job, and i\u2019ve heard that echoed by many of my friends in CS/IT. When I graduated I could code monolithic layered applications and architect on-prem networks. That was pretty much it, everything else was so surface level.\n\nThe biggest hurdle is always the developement landscape: containers+K8s, cloud services, advanced CLI skills, IaC, CI/CD, etc. Neither my CS coursework or my IT coursework prepped me for that stuff.\n\nFrom what I've experienced and heard, colleges often lag behind industry trends by 5-10+ years. We really need them to offer courses on devops, cloud, and modern development processes to better prepare new grads. It can\u2019t just about writing code anymore; it needs to be about writing code and then containerizing it and deploying it on AWS ECS using tools like Terraform, stuff like that.\n\nAnd yea in a perfect world devs shouldn\u2019t be setting up RDS instances or deploying via terraform but in a lot of companies the lines between true devs/cloud/devops are blurry, so it\u2019s definitely plausible that developers might find themselves setting up RDS instances or stuff like that.",
            "The amount of people I see having concerns like this has really got me thinking someone should write a book.\n\nThis book would be tailored not to programming, but to terminology and basic fundamentals of a programmer mindset.  Quickly and swiftly going over foundational knowledge any programmer should have.  \n\n\nThe kinds of things in this book would be like:  \n\n* CPU Basics, x86, Arm, 32 bit vs 64 bit, cores and threads, tiny history lesson\n\n* RAM basics, binary, and base 2, bit shift operations, asm mov instructions, big endian vs little endian, the BASICS.  \n\n* The CPU Buss, Pci-e gen 1 vs 2 vs 3 vs 4 vs 5 (very very basic)\n\n* Data Flow, how does data move on and off the stack, into and out of HEAP\n\n* Operating System Basics, Linux, Windows, Mac OSX\n\n* Swap/Page files\n\n* Environment Variables, bash/zsh/cmd contexts\n\n* Programming Terminology\n\n* VM, CLR, Virtual Runtime, managed applications vs native applications, AOT vs JIT, etc etc etc etc.\n\nJust a big thick 400+ page book very breifly consolidating 30 years of progress into a digestible chunk.\n\nIt should be like an intro to software engineering primer.\n\nAnyone know of such a book?  OP needs it.",
            "!remindme 2 days",
            "Don't worry about that, tools come and go, they don't last all that long nowadays. What you learned at school will help you easily understand tools and be useful for life.",
            "Does your school offer any classes, research or fellowships that offer AWS credits? When I did my classes on big data, the schooled offered extra credit if you did your projects on the cloud vs the schools own on prem clusters. A fast way to learn more about how projects, products or services are built is watch some yt videos on system design. Then you can research more about the things you don\u2019t know. Don\u2019t worry, most ppl with decades of experience can\u2019t build an entire project themselves in the cloud. Hackathon allows a lot of creatively on problem solving. So divide and conquer. Determine what you don\u2019t know and solve step by step. You do not need to iterate or optimize.",
            "Skill issue",
            "Dude, learn coding online. I learn more from Udemy, YouTube and from people without college degrees than from my own university CS classes. College it's just there to teach how to tolerate people and if you're willing to commit to a company.\n\nCan not believe you don't know what an environment variable is...no offenses. Learn online!.",
            "I\u2019m a CS STUDENT, thought I was great TURNED OUT IM AN IDIOT",
            "so youve started a STEM degree without being into STEM? thats like someone trying to become a professional athlete because they were good ad PE, even though they sat around on their ass all childhood.\n\nbut dont worry, corporate is made for fake it till you make its like you, in a couple years you can missmanage a team of actual competent engineers and run that into the ground. as is tradition."
        ]
    },
    {
        "post_id": "1c5w0dc",
        "author": "ProMensCornHusker",
        "title": "My 1 Month Search for a Summer Internship ",
        "url": "https://i.redd.it/jhbg3c9loxuc1.jpeg",
        "score": 1981,
        "num_comments": 110,
        "created_utc": 1713313469.0,
        "selftext": "Not a joke, I applied to a single place and got the offer \ud83d\ude05. \n\nI wasn\u2019t initially planning on doing a cs internship this summer, so I just applied to a single place randomly a couple months ago.",
        "permalink": "/r/csMajors/comments/1c5w0dc/my_1_month_search_for_a_summer_internship/",
        "comments": [
            "Congratulations (fuck you)",
            "https://preview.redd.it/efymkwc51zuc1.jpeg?width=678&format=pjpg&auto=webp&s=227c4d51668f6f2193c318159cfdfb213a97f88d\n\n(But really, congrats on landing something though!)",
            "This is harder than winning the lottery lol",
            "Damn, did the company ask how your dad was doing, during the interview?",
            "https://i.redd.it/833y18x7zyuc1.gif",
            "Bro is the other candidate",
            "Flex fr",
            "Impressive for an internship. I remember back in 2018 I just said \u201cehhh I\u2019ll apply to Facebook\u201d and then forgot about it. Wasn\u2019t searching and didn\u2019t apply to anything else. Didn\u2019t really plan on changing. Almost 3 months later I get this ping. Few rounds later and hey an offer. Anyways, grats!",
            "Can you ask your dad if he's got another opening?",
            "https://preview.redd.it/63afscj2m0vc1.png?width=640&format=pjpg&auto=webp&s=db01d3371f54ec7991f1a6088208d931773a5aff",
            "congrats on having a dad that owns the company \ud83d\ude02",
            "Crazy. You didn\u2019t copy and paste your resume to 100k jobs. But found one that fit you. Nice.",
            "Bro does leetcode for fun no wonder he got it. Haha congrats",
            "Wtf",
            "\u2026 congratulations",
            "Ayyy congrats",
            "Biggest flex, but congratulations brother",
            "Now I'm depressed",
            "What app what's the tool you used here?",
            "Bruh is ppl in this chat interview lucky",
            "Any projects or anything at all?",
            "Was the same for me.\n\nSome things are too good to be true. I'll leave it at that.",
            "This happened to me too I was looking to get one but only wanted work at a specific company and I got it lol feel bad for everyone else tho market be tough",
            "You\u2019re a rare breed\n\n![gif](giphy|FoQBDyLA82yZ8AHyht)",
            "lol that was my search last year granted it wasnt the best company out there. This year was a lot more difficult. Good job friend",
            "I applied to like 40-50, ending up reaching out to a company that was local to me that wasn\u2019t even hiring. They interviewed me, I was very under qualified and made that clear. They made a position for me for the summer anyways and hired me. Not bragging, but just saying, don\u2019t be afraid to send an email somewhere if they don\u2019t have a position posted",
            "[deleted]",
            "Nice",
            "Inspiration \\*\\*mic drop\\*\\*",
            "Bro got an internship at McDonalds drive through",
            "Do you have to pay the company for the internship by any chance :')?",
            "Any tips for someone who's looking for a summer internship in web/app dev.",
            "happy for you tho\n\nhttps://preview.redd.it/uovbk3zoh0vc1.jpeg?width=677&format=pjpg&auto=webp&s=54aa1c0513f7ff496382f935eea7464400eb63e7",
            "Can you send me your resume?",
            "Dude put it all on a one card",
            "This was me last year and they offered a full time. Congrats!!!",
            "same here OP applied for new grad roles in just the career fair (literally just handing out resumes) and got it in around a month",
            "Congratulations, & FUCK you",
            "This is why I'm depressed",
            "This is why I'm depressed",
            "Bruh, my first CS co-op interview back in 2011 was after over 100 applications lol. I got the job after that, but I hate you lol. Congrats!",
            "what software is used to create this i want to do it",
            "Congrats! May I ask how you made the graphic?",
            "Lmaoo\n\nhttps://preview.redd.it/3jt7h8uff2vc1.png?width=1080&format=pjpg&auto=webp&s=ef667230167d9902795f22d464e85e38336a4046",
            "How is your dad?",
            "Cong (FUCK YOU) ratulations! Nah but honestly good for you.",
            "\ud83d\ude2dI\u2019m jealous",
            "Question but how does your resume look; mostly speaking on projects; also would this be your first internship or you\u2019ve had a few down the line?",
            "What your resume look like please let me know!!",
            "I see alot of people tracking their applications with some kind of graphic or chart like this, is it a program or hand drawn?",
            "This is proof of taxi cab theory",
            "Which  college you attend",
            "How you make one of these charts",
            "Good shit",
            "DEI?",
            "How was the interview process like?\u00a0",
            "Go fuck yourself have fun"
        ]
    }
]